//////////////////////////

report("TESTING NUEXP");

assert(>nuexp('x', '`x'));
assert(>nuexp('X', '`X'));
assert(>!nuexp('x', '`X'));
assert(>!nuexp('X', '`x'));
assert(>!nuexp('x`x', '```x``'));
assert(>nuexp('magnus', 'magnus'));
assert(>!nuexp('magnus', 'mognus'));
assert(>!nuexp('mognus', 'magnus'));
assert(>nuexp('magnus', 'm?gnus'));
assert(>nuexp('magnus', 'm??nus'));
assert(>nuexp('magnus', 'm*nus'));
assert(>nuexp('magnus', '*'));
assert(>nuexp('magnus', '*magnus'));
assert(>nuexp('magnus', 'magnus*'));
assert(>nuexp('magnus', '*magnus*'));
assert(>!nuexp('magnus', '*mognus*'));
assert(>!nuexp('magnus', 'mAgnus'));
assert(>!nuexp('Magnus', 'magnus'));
assert(>nuexp('mAgnus', 'mAgnus'));
assert(>nuexp('mAgnus', 'MAGNUS'));
assert(>nuexp('mAgnus', 'MAGNUS'));
assert(>!nuexp('mAgnus', '`M`A`G`N`U`S'));
assert(>nuexp('magnus', 'magn[u]s'));
assert(>!nuexp('magns', 'magn[u]s'));
assert(>nuexp('magnus', 'magn~s'));
assert(>nuexp('magns', 'magn~s'));
assert(>nuexp('magnus', 'magn~~s'));
assert(>nuexp('magns', 'magn~~s'));
assert(>nuexp('magnus', 'magn?~s'));
assert(>nuexp('magnuus', 'magn?~s'));
assert(>nuexp('g', '[magnus]'));
assert(>nuexp('magnus', '[magnus]*'));
assert(>nuexp('magnus', '[magnus]??????'));
assert(>nuexp('sungam', '[magnus]??????'));
assert(>!nuexp('magnus', '[magnu]??????'));
assert(>nuexp('magnus', '[magnu]?????[]?'));
assert(>nuexp('magnus', '[magnus]~~~~~~'));
assert(>nuexp('magnus', '[magnus]~~~~~~~'));
assert(>!nuexp('magnus', '[magnus]~~~~~'));
assert(>nuexp('magnus', '[magnus]???~~~'));
assert(>!nuexp('magnuus', '[magnus]???~~~'));
assert(>nuexp('mag', '[magnus]???~~~'));
assert(>!nuexp('ma', '[magnus]???~~~'));
assert(>nuexp('magnus', '[magnus]???*'));
assert(>nuexp('mag', '[magnus]???*'));
assert(>!nuexp('ma', '[magnus]???*'));
assert(>!nuexp('magnus', '[^s]???????'));
assert(>nuexp('magnus', '[^s]?????[^magnu]*'));
assert(>nuexp('abcdefgh', '[a-d]????[c-ehgf]????'));
assert(>nuexp('abcdefgh', '[a-d]????[c-ehgf]????'));
assert(>nuexp('---', '[-]???'));
assert(>nuexp(']]]', '[]]???'));
assert(>nuexp('^^^', '[^]???'));
assert(>nuexp('^]^', '[]^]???'));
assert(>!nuexp('^]^', '[^]]???'));
assert(function { a.n = 0; nuexpLo('"abcd"efgh"', 0, '"(*)"%', @a); nuexpLo('"abcd"efgh"', 0, '"(%)"%', @a); (a.n == 2 && a[0].begin == 1 && a[0].end == 10 && a[1].begin == 1 && a[1].end == 5); });
assert(>nuexp("---abc", "(%abc|def|ghi%)"));
assert(>nuexp("def", "(%abc|def|ghi%)"));
assert(>nuexp("ghi---", "(%abc|def|ghi%)"));
assert(>!nuexp("---def", "(%abc|def|ghi%)"));
assert(>!nuexp("def---", "(%abc|def|ghi%)"));
function {
	pattern = '[_]%(abc|def(%)ghi*|jkl%|)([^_a-z]~)[_]%';
	m.n = 0;
	a.n = 0;
	nuexpLo('abc', 0, pattern, @a);						compose(@m[m.n++], 0, 0, 3,   0, 3, 3);
	nuexpLo('abc5', 0, pattern, @a);					compose(@m[m.n++], 0, 0, 3,   0, 3, 4);
	nuexpLo('__abc____', 0, pattern, @a);				compose(@m[m.n++], 0, 2, 5,   0, 5, 5);
	nuexpLo('__def9999ghi333____', 0, pattern, @a);		compose(@m[m.n++], 1, 2, 19,  0, 5, 9,    0, 19, 19);
	nuexpLo('__jkl77____', 0, pattern, @a);				compose(@m[m.n++], 2, 2, 6,   0, 6, 7);
	nuexpLo('_____', 0, pattern, @a);					compose(@m[m.n++], 3, 0, 0,   0, 0, 0);
	pattern = '(a(b*(c(d*|z)e)f*)g)';
	nuexpLo('abcdefg', 0, pattern, @a);					compose(@m[m.n++], 0, 0, 7,   0, 1, 6,    0, 2, 5,   0, 3, 4);
	nuexpLo('ab1234cd5678ef9999g', 0, pattern, @a);		compose(@m[m.n++], 0, 0, 19,  0, 1, 18,   0, 6, 13,  0, 7, 12);
	nuexpLo('ab1234cz5678ef9999g', 0, pattern, @a);		// shouldn't match
	nuexpLo('ab1234czef9999g', 0, pattern, @a);			compose(@m[m.n++], 0, 0, 15,   0, 1, 14,  0, 6, 9,   1, 7, 8);
	pattern = '(a(b*)(c*)d)';
	nuexpLo('ab1234c5678d', 0, pattern, @a);			compose(@m[m.n++], 0, 0, 12,   0, 1, 6,    0, 6, 11);

	for ({ i = 0; x = 0 }; i < m.n; ++i) { for (j = 0; j < m[i].n; j += 3) { assert(>a[x].alt == m[i][j] && a[x].begin == m[i][j + 1] && a[x].end == m[i][j + 2]); ++x; } };
	assert(>a.n == x);
}();
numRE = '{[+-]~}{[1-9][0-9]*|0}{|.[0-9]?*|}{|E[+-][1-9][0-9]*|}';
dateRE = '{19|20}[0-9]??[- /.]{0[1-9]|1[012]}[- /.]{0[1-9]|[12][0-9]|3[01]}';
assert(>!nuexp("", numRE));
assert(>nuexp("35", numRE));
assert(>nuexp("+35", numRE));
assert(>nuexp("+35.19", numRE));
assert(>nuexp("+35e+103", numRE));
assert(>nuexp("+35.19e+103", numRE));
assert(>nuexp("-35.19E-103", numRE));
// TODO : check output of above and check dateRE too
