########################################
#                                      #
#          PEG for PikaScript          #
#                                      #
#  Copyright 2010 NuEdge Development   #
#                                      #
########################################

# ----------------------------------------------------------------------------------------------------------------------

root		<-								{ fn = '' }
				( Spacing b=PikaBlock		{ fn #= $b # ';' }
				)? Spacing g:Grammar		{ fn #= $g; $$ = fn }

# ----------------------------------------------------------------------------------------------------------------------


#############################
#    Hierarchical syntax    #
#############################


# ----------------------------------------------------------------------------------------------------------------------

Grammar		<-								{ $$ = '' }
				Spacing ( d:Definition		{ $$ #= $d # ";\n\n" }
				)* EndOfFile

# ----------------------------------------------------------------------------------------------------------------------

Definition	<-	id:Identifier LEFTARROW		{ $$.tag = ''; $$.vi = 0 }
					Expression				{ $$ = 'function ' # $id # '() { return ' # $$ # ' }' }

# ----------------------------------------------------------------------------------------------------------------------

Expression	<-								{ $s.vi = $$.vi + 1; $s.tag = $$.tag; $$ = '' }
				s:Sequence					{ $$ = $s }
				( SLASH s:Sequence			{ $$ #= ' || ' # $s }
				)*							{ $$ = 'function() { var m = i; return ' # $$ # ' }()' }

# ----------------------------------------------------------------------------------------------------------------------

Sequence	<-								{ $p.vi = $$.vi; $p.tag = $$.tag; $$ = '' }
				( p:(Prefix / Action)		{ $$ #= (if ($$ != '') ' && ') # $p }
				)*							{ $$ #= ' || (i = m, false)' }

# ----------------------------------------------------------------------------------------------------------------------

Action		<-	b=PikaBlock Spacing			{ $$ #= 'ACTION(' # $b # ')' }

# ----------------------------------------------------------------------------------------------------------------------

Prefix		<-								{ $c.vi = $$.vi; $c.tag = $$.tag }
				AND c:Capture				{ $$ = 'LOOK_AHEAD(' # $c # ')' }
				/ NOT c:Capture				{ $$ = 'NOT LOOK_AHEAD(' # $c # ')' }
				/ Capture

# ----------------------------------------------------------------------------------------------------------------------

Capture		<-	v:Variable EQUALS Tagged	{ $$ = 'CAPTURE(' # $$ # ' INTO ' # $v # ')' }
				/ Tagged

# ----------------------------------------------------------------------------------------------------------------------

Tagged		<-	v:Variable COLON			{ $t.vi = $$.vi; $t.tag = $v }
					t:Suffix				{ $$ = $t }
				/ Suffix
				
# ----------------------------------------------------------------------------------------------------------------------

Suffix		<-	Primary ( QUESTION			{ $$ = '(' # $$ # ' || true)' }
						  / STAR			{ $$ = 'function() { while (' # $$ # '); return true; }()' }
						  / PLUS			{ $$ = 'function() { var ok = false; while (' # $$ # ') ok = true; return ok; }()' }
				)?

# ----------------------------------------------------------------------------------------------------------------------

Primary		<-	Identifier !LEFTARROW		{ $$ #= '(' # $$.tag # ')' }
				/ Literal					{ $$ = 'EXACTLY(' # escape($$) # ')' }
				/ Class						{ $$ = 'ANY_OF(' # escape($$) # ')' }
				/ DOT						{ $$ = 'i < s.length && (++i, true)' }
				/ OPEN Expression CLOSE

# ----------------------------------------------------------------------------------------------------------------------


########################
#    Lexical syntax    #
########################


# ----------------------------------------------------------------------------------------------------------------------

Identifier	<-	$$=(IdentStart IdentCont*) Spacing

# ----------------------------------------------------------------------------------------------------------------------

IdentStart	<-	[a-zA-Z_]

# ----------------------------------------------------------------------------------------------------------------------

IdentCont	<-	IdentStart / [0-9] 

# ----------------------------------------------------------------------------------------------------------------------

Variable	<-	( '$$'						{ $$ = '[$0]' }
				  / $$=PikaVar				{ $$ = '$' # $$ }
				) Spacing

# ----------------------------------------------------------------------------------------------------------------------

Literal		<-								{ $$ = '' }
				['] ( !['] c:Char			{ $$ #= $c }
				)* ['] Spacing
				/ ["] ( !["] c:Char			{ $$ #= $c }
				)* ["] Spacing

# ----------------------------------------------------------------------------------------------------------------------

Class		<-								{ $$ = '' }
				'[' ( !']' r:Range			{ $$ #= $r }
				)* ']' Spacing

# ----------------------------------------------------------------------------------------------------------------------

Range		<-	f:Char '-' t:Char			{ $$ = ''; for (i = ordinal($f); i <= ordinal($t); ++i) $$ #= char(i); }
				/ $$:Char

# ----------------------------------------------------------------------------------------------------------------------

Char		<-	"\\" x=[nrt'"\[\]\\]		{ $$ = "\n\r\t'\"[]\\"{find("nrt'\"[]\\", $x)} }
				/ "\\" x=([0-3][0-7][0-7])	{ $$ = char($x{0} * 64 + $x{1} * 8 + $x{2}) }
				/ "\\" x=([0-7][0-7])		{ $$ = char($x{0} * 8 + $x{1}) }
				/ "\\" x=([0-7])			{ $$ = char($x{0}) }
				/ ![\\\0-\37] $$=.

# ----------------------------------------------------------------------------------------------------------------------

Spacing		<-	(Space / Comment)*

# ----------------------------------------------------------------------------------------------------------------------

Comment		<-	'#' (!EndOfLine .)*
				(EndOfLine / EndOfFile)

# ----------------------------------------------------------------------------------------------------------------------

Space		<-	' ' / "\t" / EndOfLine

# ----------------------------------------------------------------------------------------------------------------------

EndOfLine	<-	"\r\n" / "\n" / "\r"

# ----------------------------------------------------------------------------------------------------------------------

EndOfFile	<-	!.

# ----------------------------------------------------------------------------------------------------------------------


#################
#    Actions    #
#################


# ----------------------------------------------------------------------------------------------------------------------

PikaVar		<-	[a-zA-Z_] ('.'? [a-zA-Z$_0-9])*

# ----------------------------------------------------------------------------------------------------------------------

PikaBlock	<-	'{' ( &'{' PikaBlock
					/ &["'] PikaString
					/ &('/*' / '//') PikaComment
					/ !'}' .
					)* '}'

# ----------------------------------------------------------------------------------------------------------------------

PikaString	<-	'"' ( ('\\' / !'"') . )* '"'
				/ "'" ( ("''" / !"'" .) )* "'"

# ----------------------------------------------------------------------------------------------------------------------

PikaComment	<-	'/*' (!'*/' .)* '*/'
				/ "//" (!EndOfLine .)* (EndOfLine / EndOfFile)

# ----------------------------------------------------------------------------------------------------------------------


################
#    Tokens    #
################


# ----------------------------------------------------------------------------------------------------------------------

LEFTARROW	<-	'<-' Spacing
SLASH		<-	'/' Spacing
AND			<-	'&' Spacing
NOT			<-	'!' Spacing
QUESTION	<-	'?' Spacing
STAR		<-	'*' Spacing
PLUS		<-	'+' Spacing
OPEN		<-	'(' Spacing
CLOSE		<-	')' Spacing
DOT			<-	'.' Spacing
COLON		<-	':' Spacing
EQUALS		<-	'=' Spacing

# ----------------------------------------------------------------------------------------------------------------------
