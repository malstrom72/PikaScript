include('stdlib.pika');
include('debug.pika');
include('lab/plotter.pika');

compose(@geneNames, 
	"env_time"
	, "env_loop"	
	, "env_tilt"	
	, "vol_atk"		
	, "vol_dcy"		
	, "vol_sus"		
	, "mod_atk"		
	, "mod_dcy"		
	, "mod_sh"		
	, "mod_vel"		
	, "lfo_rate"	
	, "lfo_amt"		
	, "lfo_bal"		
	, "a_form"		
	, "a_noise"		
	, "a_color"		
	, "a_freq"		
	, "a_mod"		
	, "b_form"		
	, "b_noise"		
	, "b_freq"		
	, "b_mod"		
	, "b_sh"		
	, "fm_amt"		
	, "fm_mod"		
	, "sub_am"		
	, "balance"		
	, "mix_mod"
	, "flt_type"					
	, "flt_freq"	
	, "flt_mod"		
	, "flt_sep"		
	, "flt_q"		
	, "flt_kf"		
	, "shaper"		
	, "fx_mix"		
	, "fx_p1"		
	, "fx_p2"		
	, "fx_p3"		
	, "fx_p4"
	, "effect"
	, "release"
	, "volume"
	, "lfoPhase"
	, "trigAt"
	, "releaseAt");

print("loading source...");
s = load($1);

prune(@tests);
prune(@scores);
paramIndex = 0;
tests.n = 0;
scores.n = 0;
tokenize(s, >{
	if (paramIndex < 46) {
		append(@tests[tests.n].p, +$0);
		++paramIndex;
	} else if (paramIndex == 46) {
		score = $0 * 100 - 100;
		tests[tests.n].score = score;
		append(@scores, score);
		++paramIndex;
	} else if (paramIndex == 47) {
		++tests.n;
		paramIndex = 0;
		if ((tests.n % 1000) == 0) {
			print("parsed " # tests.n # " tests...");
		}
	}
});
print("parsed " # tests.n # " tests");

print("sorting scores...");
sort(@scores);
plot(@scores);

print("max score: " # scores[scores.n - 1]);
print("min score: " # scores[0]);

goodThres = scores[scores.n \ 20];
print("good score thres: " # goodThres);

print("picking out the good ones...");
prune(@goodOnes);
goodOnes.n = 0;
for (i = 0; i < tests.n; ++i) if (tests[i].score < goodThres) clone(@tests[i], @goodOnes[goodOnes.n++]);
prune(@flatParams);
for (paramIndex = 0; paramIndex < 46; ++paramIndex) for (i = 0; i < goodOnes.n; ++i) append(@flatParams[paramIndex], goodOnes[i].p[paramIndex]);
flatParams.n = 46;

print("making histograms...");
for (i = 0; i < 46; ++i) histogram(@histo[i], @flatParams[i], 100);

for (i = 0; i < 46; ++i) { print(geneNames[i]); print('-------------'); plot(@histo[i]); print(''); print(''); };

for (j = 0; j < 46; ++j) {
	for (i = j + 1; i < 46; ++i) {
		corr = pmcc(@flatParams[j], @flatParams[i]);
		if (abs(corr) > 0.2) {
			print(geneNames[j] # " -> " # geneNames[i] # ": " # corr);
		};
	};
};

