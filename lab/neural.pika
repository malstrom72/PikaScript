NeuralNetwork = function {
	args(@inputCount, @hiddenCount, @outputCount);
	nn = this();
	[nn].inputCount = inputCount;
	[nn].hiddenCount = hiddenCount;
	[nn].outputCount = outputCount;
	for (i = 0; i < outputCount; ++i) {
		for (j = 0; j < hiddenCount + 1; ++j) {
			[nn].outputWeights[i][j] = random(0.1) - 0.05;
		}
	};
	for (i = 0; i < hiddenCount; ++i) {
		for (j = 0; j < inputCount + 1; ++j) {
			[nn].hiddenWeights[i][j] = random(0.1) - 0.05;
		}
	};

	[nn].feedforward = function {
		args(@inputs, @hidden, @outputs);
		nn = this();
		for (i = 0; i < [nn].hiddenCount; ++i) {
			s = 0.0;
			for (j = 0; j < [nn].inputCount; ++j) {
				s += [inputs][j] * [nn].hiddenWeights[i][j];
			};
			s += [nn].hiddenWeights[i][j];
			[hidden][i] = 1.0 / (exp(-s) + 1.0);
		};
		for (i = 0; i < [nn].outputCount; ++i) {
			s = 0.0;
			for (j = 0; j < [nn].hiddenCount; ++j) {
				s += [hidden][j] * [nn].outputWeights[i][j];
			};
			s += [nn].outputWeights[i][j];
			[outputs][i] = 1.0 / (exp(-s) + 1.0);
		};
	};
	
	[nn].backpropagate = function {
		args(@inputs, @hidden, @outputs, @targets, @rate);
		nn = this();
		for (i = 0; i < [nn].outputCount; ++i) {
			o = [outputs][i];
			errors[i] = d = o * (1 - o) * ([targets][i] - o);
			for (j = 0; j < [nn].hiddenCount; ++j) {
				[nn].outputWeights[i][j] += rate * d * [hidden][j];
			};
			[nn].outputWeights[i][j] += rate * d;
		};
		for (i = 0; i < [nn].hiddenCount; ++i) {
			d = 0.0;
			for (j = 0; j < [nn].outputCount; ++j) d += errors[j] * [nn].outputWeights[j][i];
			o = [hidden][i];
			d *= o * (1 - o);
			for (j = 0; j < [nn].inputCount; ++j) {
				[nn].hiddenWeights[i][j] += rate * d * [inputs][j];
			};
			[nn].hiddenWeights[i][j] += rate * d;
		};
	};

	[nn].learn = function {
		args(@inputs, @targets, @rate, @outputs);
		nn = this();
		[nn].feedforward(inputs, @hidden, outputs);
		[nn].backpropagate(inputs, @hidden, outputs, targets, rate);
		( outputs )
	};
	
	[nn].error = function {
		args(@targets, @outputs);
		error = 0.0;
		for (i = 0; i < [nn].outputCount; ++i) error += sqr([targets][i] - outputs[i]);
		( error / i )
	};
};

// g=function { inputs[0]=$0; targets[0]=$1; targets[1]=$2; ::nn.feedforward(@inputs, @hidden, @outputs); ::nn.backpropagate(@inputs, @hidden, @outputs, @targets, $3); print(outputs[0]); print(outputs[1]); }
// for(i=1;i<100;++i){for(j=0;j<1.0;j+=0.01)g(j, sin(2*j), 1-sin(2*j), rate);}
// learnSine = function { p = random(1); inputs[0] = p; targets[0] = sin(p * 2 * PI) * 0.25 + 0.5; ::nn.learn(@inputs, @targets, ::rate, @outputs); i = round(p * 1000); ::out.n = 1000; ::out[i] = outputs[0]; };
// test = function { if (!exists(@::nn.learn)) construct(@::nn, NeuralNetwork, 1, 10, 1); for (i = 0; i < 10000; ++i) learnSine(); plot(@::out) };
