root		<-	(Spacing PikaBlock)? Spacing Grammar
initBlock	<-	(Spacing $$=PikaBlock)? .*
Grammar		<-	{ $a = new(Vector) } Spacing (d:Definition { [$a].append($d) })* EndOfFile { $$ = $a }
Definition	<-	id:Identifier LEFTARROW x=Expression { $$ = new(Map, 'rule', $id, 'definition', trim($x)) }
Expression	<-	Sequence (SLASH Sequence)*
Sequence	<-	(Prefix / Action)*
Prefix		<-	AND Capture / NOT Capture / Capture
Capture		<-	(Variable EQUALS)? Tagged
Tagged		<-	(Variable COLON)? Suffix
Suffix		<-	Primary (QUESTION / STAR / PLUS)?
Primary		<-	Identifier !LEFTARROW / Literal / Class / DOT / OPEN Expression CLOSE
Action		<-	PikaBlock Spacing
Identifier	<-	$$=(IdentStart IdentCont*) Spacing
IdentStart	<-	[a-zA-Z_]
IdentCont	<-	IdentStart / [0-9] 
Variable	<-	('$$' / PikaVar) Spacing
Literal		<-	['] (!['] Char)* ['] Spacing / ["] (!["] Char)* ["] Spacing
Class		<-	'[' (!']' Range)* ']' Spacing
Range		<-	Char '-' Char / Char
Char		<-	"\\" [nrt'"\[\]\\] / "\\" ([0-2][0-7][0-7]) / "\\" ([0-7][0-7]?) / ![\\\0-\37] .
Spacing		<-	(Space / Comment)*
Comment		<-	'#' (!EndOfLine .)* (EndOfLine / EndOfFile)
Space		<-	' ' / "\t" / EndOfLine
EndOfLine	<-	"\r\n" / "\n" / "\r"
EndOfFile	<-	!.
PikaVar		<-	[a-zA-Z_] ( '.'? [a-zA-Z$_0-9] )*
PikaBlock	<-	'{' ( &'{' PikaBlock / &["'] PikaString / &('/*' / '//') PikaComment / ![{"'}] !'/*' !'//' . )* '}'
PikaString	<-	'"' (('\\' / !'"') .)* '"' / "'" ("''" / !"'" .)* "'"
PikaComment	<-	'/*' (!'*/' .)* '*/' / "//" (!EndOfLine .)* (EndOfLine / EndOfFile)
LEFTARROW	<-	'<-' Spacing
SLASH		<-	'/' Spacing
AND			<-	'&' Spacing
NOT			<-	'!' Spacing
QUESTION	<-	'?' Spacing
STAR		<-	'*' Spacing
PLUS		<-	'+' Spacing
OPEN		<-	'(' Spacing
CLOSE		<-	')' Spacing
DOT			<-	'.' Spacing
COLON		<-	':' Spacing
EQUALS		<-	'=' Spacing
