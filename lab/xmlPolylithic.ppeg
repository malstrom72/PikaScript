root            <-  prolog element Misc* ENDOFFILE
prolog          <-  XMLDecl? Misc* (doctypedecl Misc*)?
XMLDecl         <-  '<?xml' VersionInfo EncodingDecl? SDDecl? S? '?>'
VersionInfo     <-  S 'version' Eq ("'" VersionNum "'" / '"' VersionNum '"')
Eq              <-  S? '=' S?
VersionNum      <-  '1.' [0-9]+
Misc            <-  Comment / PI / S
Comment         <-  '<!--' (!'--' Char)* '-->'
Char            <-  [\t\r\n\40-\377]									# Unicode version is [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]
S               <-  [ \t\r\n]+

NameStartChar   <-  [:_A-Za-z\300-\326\330-\366\370-\377]				# Unicode version is [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
    
NameChar        <-  NameStartChar / [-.0-9]								# FIX :  | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
    
Name            <-  NameStartChar (NameChar)*
Names           <-  Name (' ' Name)*
Nmtoken         <-  (NameChar)+
Nmtokens        <-  Nmtoken (' ' Nmtoken)*

PI              <-  '<?' PITarget (S (!'?>' Char)*)? '?>'
PITarget        <-  !(('X' / 'x') ('M' / 'm') ('L' / 'l')) Name

doctypedecl     <-  '<!DOCTYPE' S Name (S ExternalID)? S? ('[' intSubset ']' S?)? '>'
DeclSep         <-  PEReference / S
intSubset       <-  (markupdecl / DeclSep)*
markupdecl      <-  elementdecl / AttlistDecl / EntityDecl / NotationDecl / PI / Comment

Reference       <-  EntityRef / CharRef
EntityRef       <-  '&' Name ';'
PEReference     <-  '%' Name ';'

element         <-  EmptyElemTag / STag content ETag
EmptyElemTag    <-  '<' Name (S Attribute)* S? '/>'
Attribute       <-  Name Eq AttValue
AttValue        <-  '"' ((![<&"] Char) / Reference)* '"' /  "'" ((![<&'] Char) / Reference)* "'"
STag            <-  '<' Name (S Attribute)* S? '>'

content         <-  CharData? ((element / Reference / CDSect / PI / Comment) CharData?)*
CharData        <-  (![<&] !']]>' Char)*
CharRef         <-  '&#' [0-9]+ ';' / '&#x' [0-9a-fA-F]+ ';'

CDSect          <-  CDStart CData CDEnd
CDStart         <-  '<![CDATA['
CData           <-  (!']]>' Char)*
CDEnd           <-  ']]>'

ETag            <-  '</' Name S? '>'

ExternalID      <-  'SYSTEM' S SystemLiteral / 'PUBLIC' S PubidLiteral S SystemLiteral
SystemLiteral   <-  ('"' (!'"' Char)* '"') / ("'" (!"'" Char)* "'")
PubidLiteral    <-  '"' PubidChar* '"' / "'" (!"'" PubidChar)* "'"
PubidChar       <-  [- \r\na-zA-Z0-9'()+,./:=?;!*#@$_%]

elementdecl     <-  '<!ELEMENT' S Name S contentspec S? '>'
contentspec     <-  'EMPTY' / 'ANY' / Mixed / children
Mixed           <-  '(' S? '#PCDATA' (S? '|' S? Name)* S? ')*' / '(' S? '#PCDATA' S? ')'
children        <-  (choice / seq) ('?' / '*' / '+')?
cp              <-  (Name / choice / seq) ('?' / '*' / '+')?
choice          <-  '(' S? cp ( S? '|' S? cp )+ S? ')'
seq             <-  '(' S? cp ( S? ',' S? cp )* S? ')'

AttlistDecl     <-  '<!ATTLIST' S Name AttDef* S? '>'
AttDef          <-  S Name S AttType S DefaultDecl

EntityDecl      <-  GEDecl / PEDecl
GEDecl          <-  '<!ENTITY' S Name S EntityDef S? '>'
PEDecl          <-  '<!ENTITY' S '%' S Name S PEDef S? '>'
EntityDef       <-  EntityValue / (ExternalID NDataDecl?)
PEDef           <-  EntityValue / ExternalID

NotationDecl    <-  '<!NOTATION' S Name S (ExternalID / PublicID) S? '>'
PublicID        <-  'PUBLIC' S PubidLiteral

AttType         <-  StringType / TokenizedType / EnumeratedType
StringType      <-  'CDATA'
TokenizedType   <-  'IDREFS' / 'IDREF' / 'ENTITY' / 'ENTITIES' / 'NMTOKENS' / 'NMTOKEN' / 'ID'

EnumeratedType  <-  NotationType / Enumeration
NotationType    <-  'NOTATION' S '(' S? Name (S? '|' S? Name)* S? ')'
Enumeration     <-  '(' S? Nmtoken (S? '|' S? Nmtoken)* S? ')'  

DefaultDecl     <-  '#REQUIRED' / '#IMPLIED' / (('#FIXED' S)? AttValue)

EntityValue     <-  '"' ((![%&"] Char) / PEReference / Reference)* '"' /  "'" ((![%&'] Char) / PEReference / Reference)* "'"

EncodingDecl    <-  S 'encoding' Eq ('"' EncName '"' / "'" EncName "'" )
EncName         <-  [A-Za-z] ([A-Za-z0-9._] / '-')*

SDDecl          <-  S 'standalone' Eq (("'" ('yes' / 'no') "'") / ('"' ('yes' / 'no') '"'))

NDataDecl       <-  S 'NDATA' S Name

ENDOFFILE		<-	!.
