include('stdlib.pika');

::ROWS = 4;
::COLS = 4;

map(@::DIRS[0], 'x',0,  'y',-1);
map(@::DIRS[1], 'x',1,  'y',0);
map(@::DIRS[2], 'x',0,  'y',1);
map(@::DIRS[3], 'x',-1, 'y',0);

for (y = 0; y < ::ROWS; ++y) {
	for (x = 0; x < ::COLS; ++x) {
		::board[y][x] = y * ::COLS + x + 1;
	}
};
::board[::ROWS - 1][::COLS - 1] = ' ';
::free.y = ::ROWS - 1;
::free.x = ::COLS - 1;

printBoard = function {
	for (y = 0; y < ::ROWS; ++y) {
		s = '';
		for (x = 0; x < ::COLS; ++x) {
			b = ::board[y][x];
			s #= repeat(' ', 4 - length(b)) # b;
		};
		print(s);
	}
};

isOnBoard = function { args(@x, @y); (x >= 0 && y >= 0 && x < ::COLS && y < ::ROWS); };

scramble = function {
	args(@count);
	for (i = 0; i < count; ++i) {
		for (; { d = min(floor(random(4)), 3); (!isOnBoard(::free.x + DIRS[d].x, ::free.y + DIRS[d].y)) }; );
		newFree.x = ::free.x + DIRS[d].x;
		newFree.y = ::free.y + DIRS[d].y;
		swap(@::board[newFree.y][newFree.x], @::board[::free.y][::free.x]);
		clone(@newFree, @::free);
	}
};

scramble(100);

for (; {
	printBoard();
	s = input("> ");
	if (s == '?' || s == '') {
		print("Enter the move");
	} else if ((d = find('dlur', s{0})) < 4 && isOnBoard(::free.x + DIRS[d].x, ::free.y + DIRS[d].y)) {
		newFree.x = ::free.x + DIRS[d].x;
		newFree.y = ::free.y + DIRS[d].y;
		swap(@::board[newFree.y][newFree.x], @::board[::free.y][::free.x]);
		clone(@newFree, @::free);
	} else if (s != "quit") {
		print("Say what?");
	};
	(s != "quit")
};);

( void )
