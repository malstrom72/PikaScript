#! /usr/local/bin/PikaCmd
include('stdlib.pika');

// Bugs: doesnt support en passant or castling, doesn't tell when you are checkmated (but tells when you have checkmated computer)
// TODO : print computer moves (D2-D4 etc)

INIT_STATE = 'RNBQKBNRPPPPPPPP................................pppppppprnbqkbnr;WCC-;0';
CHECKMATE_SCORE = -2000;

map(@SCORES,	'R', +50 + 0, 'N', +30 + 0, 'B', +30 + 0, 'Q', +90 + 0, 'K', +1000 + 0, 'P', +10 + 0,
				'r', -50 - 7, 'n', -30 - 7, 'b', -30 - 7, 'q', -90 - 7, 'k', -1000 - 7, 'p', -10 - 7);
map(@COLORS, 'R', 'W', 'N', 'W', 'B', 'W', 'Q', 'W', 'K', 'W', 'P', 'W', 'r', 'B', 'n', 'B', 'b', 'B', 'q', 'B', 'k', 'B', 'p', 'B', '.', void);
map(@KINGS, 'W', 'K', 'B', 'k');
map(@ALL_PIECES, 'W', 'RNBQKP', 'B', 'rnbqkp');

onBoard = function /* (x, y) */ { (0 <= $0 && $0 < 8 && 0 <= $1 && $1 < 8) };
isPiece = function /* (piece) */ { ($0 !== '.') };
turnColor = function /* (state) */ { $0{65} };
getSquare = function /* (state, x, y) */ { $0{$2 * 8 + $1} };
noKing = function /* (state) */ { find($0{:64}, KINGS[$0{65}]) == 64 };
pieceScore = function /* (piece, y) */ { if ($0 === '.') 0 else SCORES[$0] + $1 };
getScore = function /* (state) */ { if (turnColor($0) === 'B') -$0{70:} else $0{70:} };
liftUp = function /* (state, x, y) */ { i = $2 * 8 + $1; $0{:i} # '.' # $0{i + 1:69 - i} # ($0{70:} - pieceScore($0{i}, $2)) };

putDown = function /* (state, piece, x, y) */ {
	i = $3 * 8 + $2;
	$0{:i} # $1 # $0{i + 1:65 - i - 1} # (if (COLORS[$1] === 'W') 'B' else 'W') # $0{66:4} # ($0{70:} - pieceScore($0{i}, $3) + pieceScore($1, $3));
};

display = function /* (state) */ {
	print("\n" # (if (turnColor($0) === 'W') 'White''s turn' else 'Black''s turn') # ' (score: ' # getScore($0) # ")\n");
	for (y = 7; y >= 0; --y) {
		s = (y + 1) # ' | ';
		for (x = 0; x < 8; ++x) s #= (if ((p = $0{y * 8 + x}) === '.' && ((x ^ y) & 1) == 1) ' ' else p) # ' ';
		print(s);
	};
	print("    ---------------\n    A B C D E F G H\n");
};
  
singleStep = function /* (state:$0, x:$1, y:$2, piece:$3, execute:$4, deltaX:$5, deltaY:$6) */ {
	if (!onBoard($1 += $5, $2 += $6) || COLORS[getSquare($0, $1, $2)] === COLORS[$3]) true
	else $4(putDown($0, $3, $1, $2))
};

multiStep = function /* (state:$0, x:$1, y:$2, piece:$3, execute:$4, deltaX:$5, deltaY:$6) */ {
	color = COLORS[$3];
	for (continue = true; {
		if (!onBoard($1 += $5, $2 += $6) || COLORS[q = getSquare($0, $1, $2)] === color) false
		else (continue = $4(putDown($0, $3, $1, $2))) && !isPiece(q);
	}; ) ;
	continue
};

rotate = function /* (movement, state, x, y, piece, execute, deltaX, deltaY) */ {
	$0($1, $2, $3, $4, $5, +$6, +$7) &&
	$0($1, $2, $3, $4, $5, -$7, +$6) &&
	$0($1, $2, $3, $4, $5, -$6, -$7) &&
	$0($1, $2, $3, $4, $5, +$7, -$6);
};

map(@moves
	, 'P', function {
		args(@state, @x, @y, @p, @exec);
		continue = true;
		if ((color = COLORS[p]) === 'W') { capture = 'B'; d = 1; first = 1; newPiece = (if (y == 6) 'Q' else p) }
		else { capture = 'W'; d = -1; first = 6; newPiece = (if (y == 1) 'q' else p) };
		if (continue && !isPiece(getSquare(state, x, y + d))) {
			continue = exec(putDown(state, newPiece, x, y + d));
			if (continue && y == first && !isPiece(getSquare(state, x, y + d + d))) {
				continue = exec(putDown(state, p, x, y + d + d));
			};
		};
		if (continue && x > 0 && COLORS[getSquare(state, x - 1, y + d)] === capture) {
			continue = exec(putDown(state, newPiece, x - 1, y + d));
		};
		if (continue && x < 7 && COLORS[getSquare(state, x + 1, y + d)] === capture) {
			continue = exec(putDown(state, newPiece, x + 1, y + d));
		};
		continue
	}
	, 'R', function {
		rotate(multiStep, $0, $1, $2, $3, $4, +1, 0);
	}
	, 'B', function {
		rotate(multiStep, $0, $1, $2, $3, $4, +1, +1);
	}
	, 'Q', function {
		rotate(multiStep, $0, $1, $2, $3, $4, +1, 0) &&
		rotate(multiStep, $0, $1, $2, $3, $4, +1, +1);
	}
	, 'N', function {
		rotate(singleStep, $0, $1, $2, $3, $4, +2, +1) &&
		rotate(singleStep, $0, $1, $2, $3, $4, +1, +2);
	}
	, 'K', function {
		rotate(singleStep, $0, $1, $2, $3, $4, +1, 0) &&
		rotate(singleStep, $0, $1, $2, $3, $4, +1, +1);
	}
);
foreach(@moves, >moves[lower($1)] = $2);

tryAll = function /* (state:$0, exec:$1) */ {
	pieces = ALL_PIECES[turnColor($0)];
	for ({ i = 0; continue = true }; (i += find($0{i:}, pieces)) < 64 && {
			p = $0{i};
			x = i - ((y = i >> 3) << 3);
			continue = moves[p](liftUp($0, x, y), x, y, p, $1)
		}; ++i) ;
	continue
};

MAX_DEPTH = 2;

// Note: if no king return directly, since no more turns are possible after this happens, in case depth <= 1 this actually means a checkmate, so we return the special value -2000
divider = function /* (state:$0, depth:$1, alpha:$2, beta:$3) */ {
	args(@state, @depth, @alpha, @beta);
	if (noKing($0)) alpha = if (depth <= 1) CHECKMATE_SCORE else -getScore($0)
	else if (depth >= MAX_DEPTH) tryAll($0, >{ alpha = max(alpha, -getScore($0)); (alpha < beta) })
	else {
		n = 0;
		tryAll($0, >{ b = @branches[n]; sorted[n] = b; [b].state = $0; [b].score = -getScore($0); ++n; true });
		for (i = 0; alpha < beta && i < n; ++i) alpha = max(alpha, -divider([sorted[i]].state, depth + 1, -beta, -alpha));
	};
	alpha
};

chessHelp = function {
	print("\nEnter moves like this: D2-D4.\nType 'exit' to quit.\nType 'restart' to restart.\n"
			# "Type 'play' to have the computer play your color instead.\nType 'undo' to take back last move.\n");
};

init => { state = INIT_STATE; history.n = 0; display(state) };
init();

for (; {
	history[history.n] = state;
	s = replace(upper(input("> ")), "-", "");
	ok = false;
	if (s === "EXIT") false
	else if (s === "UNDO") { if (history.n > 0) state = history[--history.n]; display(state); true }
	else if (s === "RESTART") { init(); true }
	else {
		if (s === "PLAY") ok = true
		else if (length(s) != 4) chessHelp()
		else {
			fromX = ordinal(s{0}) - ordinal('A');
			fromY = ordinal(s{1}) - ordinal('1');
			toX = ordinal(s{2}) - ordinal('A');
			toY = ordinal(s{3}) - ordinal('1');
			if (!onBoard(fromX, fromY) || !onBoard(toX, toY)) chessHelp()
			else {
				color = turnColor(state);
				p = getSquare(state, fromX, fromY);
				t = getSquare(state, toX, toY);
				if (!isPiece(p)) print("No piece on " # s{0:2})
				else if (COLORS[p] !== color) print("The piece on " # s{0:2} # " is not yours")
				else if (COLORS[t] === color) print(s{2:2} # " is occupied")
				else {
					newState = liftUp(state, fromX, fromY);
					moves[p](newState, fromX, fromY, p, >{
						t = getSquare($0, toX, toY);
						if (isPiece(t) && COLORS[t] === color) {
							newState = $0;
							ok = true
						};
						!ok;
					});
					if (!ok) print(s{0:2} # " to " # s{2:2} # " is not a legal move")
					else {
						if (tryAll(newState, >{
							if (noKing($0)) { ok = false; print("Your king is or will be in check"); false }
							else true
						})) {
							state = newState;
						}
					}
				}
			};
			if (ok) display(state)
		};
		if (!ok) true
		else {
			history.n++;
			maxi = -infinity;
			print('Thinking...');
			tryAll(state, >{
				score = -divider($0, 0, -infinity, -maxi);
				if (score > maxi) { maxi = score; state = $0 };
				true
			});
			if (maxi == CHECKMATE_SCORE) upper(input('Checkmate! Do you wish to play another game (y/n)? ')){0} === 'Y'
			else {
				display(state);
				true
			}
		}
	}
}; ) ;
