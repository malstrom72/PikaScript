::edit = function {
	vargs(, @str);
	defaults(@str, '');
	
	SCREEN_ROWS = 25;
	
	HELP =	  "<enter>        down one screen (screen = 25 lines)\n"
			# "u              up one screen\n"
			# ":              append lines (empty line = done, single space = empty line etc)\n"
			# "<row>:         insert lines before this row\n"
			# "<begin>:<end>  replace lines from begin to end (inclusively)\n"
			# "<row> text     replace row with text\n"
			# "<              undo last change\n"
			# "=              exit and return the modified text (save changes)\n"
			# "!              exit and return the original text (abort changes)\n"
			# "#              toggle line numbers on / off (default: on)\n"
			# "/<search>      list all lines containing <search>\n"
			# "?              this help\n"
			# "?<page>        display standard library help page\n"
			# "run            evaluate the full edit string\n"
			# "load <path>    load file\n"
			# "save           save file (replacing the file at the last loaded / saved <path>)\n"
			# "save <path>    save file to new path\n"
			# "exit           exit\n"
			# "               anything else evaluates expression";
			
	original = str;
	resetQueue(@history);
	
	saveUndo => pushBack(@history, str);
	makeLines => {
		lines[0] = 0;
		lines.n = 1;
		tokenize(str, >append(@lines, lines[lines.n - 1] + length($0) + 1));
	};
	undo => { if (queueSize(@history) > 0) str = popBack(@history) else print('Undo history empty.'); makeLines() };
	eval => {
		eval.expr = $0;
		$x = try(>eval.result = evaluate(eval.expr, @::));
		print(if ($x !== void) ('!!!! ' # $x) else ('---- (' # eval.result # ')'));
		makeLines()
	};
	load => { args(@path); saveUndo(); print(coalesce(try(>str = ::load(path)), 'Loaded ' # path)); makeLines() };
	save => { args(@path); print(coalesce(try(>(::save(path, str))), 'Saved ' # path)) };
	change => {
		args(@$row, @$text);
		$from = min(max(+$row - 1, 0), lines.n - 1);
		saveUndo();
		if (queueSize(@history) > 10) popFront(@history);
		str = str{0:lines[$from]} # $text # LF # str{lines[min($from + 1, lines.n - 1)]:};
		makeLines()
	};
	insert => {
		args(@$from, @$to);
		$from = (if ($from === '') (lines.n - 1) else min(max(+$from - 1, 0), lines.n - 1));
		$to = (if ($to === '') ($from) else min(max(+$to, $from), lines.n - 1));
           for ({ $row = $from + 1; $text = '' }; ($s = input(' ' # radix($row, 10, 4) # ':')) !== ''; ) {
			if (span($s, ' ') == length($s)) $s = chop($s, 1);
			$text #= $s # LF;
			++$row;
		};
		print('----');
		saveUndo();
		if (queueSize(@history) > 10) popFront(@history);
		str = str{0:lines[$from]} # $text # str{lines[$to]:};
		makeLines()
	};
	search => {
		args(@$term);
		$l = 0;
		for ($i = 0; $i < length(str);) {
			$i += ::search(str{$i:}, $term);
			if ($i < length(str)) {
				for (; $l + 1 < lines.n && $i >= lines[$l + 1]; ++$l);
				$j = lines[$l];
				$r = $i + length($term);
				print(radix($l + 1, 10, 4) # ' ' # str{$j:$i - $j} # '>>>>' # str{$i:length($term)} # '<<<<'
						# str{$r:lines[$l + 1] - $r});
				$i = $r
			}
		}
	};
	help => { if (!exists(@::help)) run('src/help.pika'); ::help($0) };

	makeLines();
	
	topLine = 0;
	lineNumbers = true;
	loadedPath = '';
	for (quit = false; !quit;) {
		for ({ i = topLine; botLine = min(lines.n - 1, i + SCREEN_ROWS) }; i < botLine; ++i) {
                   print((if (lineNumbers) (' ' # radix(i + 1, 10, 4) # ' ') else '') # str{lines[i]:lines[i + 1] - lines[i] - 1});
		};
		if (botLine >= lines.n - 1) { print('--- EOF ---'); botLine = 0 };
		for (; {
			s = input('>');
			if (s === '') { topLine = botLine; false }
			else if (s === 'u') { topLine = max(topLine - SCREEN_ROWS, 0); false }
			else if (s === '?') { print(HELP); true }
			else if (s{0} === '?') { help(s{1:}); true }
			else if (s === '<') { undo(); false }
			else if (s === '#') { lineNumbers = !lineNumbers; false }
			else if (s{0} === '/') { search(s{1:}); true }
			else if (s === 'run') { eval(str); true }
			else if (s === 'save') { if (loadedPath === '') print("Must load file first!") else save(loadedPath); true }
			else if (wildmatch(s, "load[ ]?*{[^ ]?[]*}", @path)) { load(loadedPath = path); false }
			else if (wildmatch(s, "save[ ]?*{[^ ]?[]*}", @path)) { save(loadedPath = path); true }
			else if (wildmatch(s, "[0]*{[1-9]?[0-9]*}[ \t]{*}", @row, @text)) { change(trim(row, '0', void), text); false }
			else if (wildmatch(s, "[0]*{[1-9]~[0-9]*}:[0]*{[1-9]~[0-9]*}", @from, @to)) { insert(trim(from, '0', void), trim(to, '0', void)); false }
			else if (s === '!') { str = original; quit = true; false }
			else if (s === '=') { quit = true; false }
			else if (s === 'exit') { str = ''; quit = true; false }
			else { eval(s); true }
		}; ) ;
	};
	
	str
};

void
