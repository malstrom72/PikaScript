#! /usr/local/bin/PikaCmd

run('lab/parsing.pika');

VERTICAL_TICK_MARKS = 4;
HORIZONTAL_TICK_MARKS = 4;

// FIX : create a string instead of printing directly
// FIX : drop "frame" param, I think we could remove it afterwards by replacing the proper chars (= etc) instead
// FIX : use globals for configurating width, height, frame and sampling (if not keeping the named args feature in Pika at least)
// FIX : if not keeping the named args feature in Pika, remove $ in front of args
plot = function {
	vargs(@fn, , @$from, @$to, @$min, @$max, @$width, @$height, @$sampling, @$frame, @$charset);
	
	defaults(@$width, (coalesce(@::CONSOLE_COLS, 80) - 1) | 1);		// make odd, cause it looks better.
	defaults(@$height,((coalesce(@::CONSOLE_ROWS, $width \ 4) - 1) | 1) , @$charset,".:'");
	
	c = classify(fn);
	if (c === 'reference') {
		array = fn;
// FIX : why did I write this?		sampling = 1;
		fn => [array][round($0)];
		defaults(@$from, 0, @$to, [array].n - 1);
		$width = min($width, ($to - $from) + 1);
	} else if (c === 'string') {
		string = fn;
		fn => { function { args(@fn, @x, @i, @j); evaluate(fn, @$) }(string, $0, $1, $2) }
	};

	defaults(@$from,-1 , @$to,1 , @$frame,(max($width, $height) >= 40) , @$sampling,(max(max($width, $height) \ 10, 10)));
	
	for (;length($charset) < 3;) $charset #= $charset;
	$charset = ' ' # $charset;
	
	minY = +infinity;
	maxY = -infinity;
	zeroX = -1;
	k = ($to - $from) / ($width * $sampling - 1);
	x2 = $from;
	for (x = 0; x < $width; ++x) {
		yn = +infinity;
		ym = -infinity;
		if (x2 <= 0 && x2 + k * $sampling > 0) zeroX = x;
		for (i = 0; i < $sampling; ++i) {
			lx = x2;
			y = fn(x2, x, i);
			yn = min(yn, y);
			ym = max(ym, y);
			x2 += k;
		};
		if (lx != $to && x == $width - 1) {							// last extra is exact on '$to'
			y = fn($to, x, $sampling);
			yn = min(yn, y);
			ym = max(ym, y);
		};
		y0[x] = yn;
		y1[x] = ym;
		if (yn != -infinity) minY = min(minY, yn);
		if (ym != +infinity) maxY = max(maxY, ym);
	};
	defaults(@$min, minY, @$max, maxY);
	k = ($max - $min) / $height;
	ym = $max;
	yf = $max;
	nextHLine = $max;
	if ($frame) print(repeat(' ', 12) # '/' # repeat('=', $width) # '\');
	for (y = $height - 1; y >= 0; --y) {
		s = '';
		yn = ym - k;
		yh = yn + k * 0.5;
		if (y == 0) {
			yn = $min - (1e-200 + abs($min) * 1e-12);		// some extra on last line $to match >= instead of >
			nextHLine = $min;
		};
		if (nextHLine <= ym && nextHLine > yn) {
			v = precision(if (abs(nextHLine) < 1e-200 + ($max - $min) * 1e-12) 0 else nextHLine, 4);
			s = repeat(' ', (if ($frame) 11 else 12) - length(v)) # v # '-' # (if ($frame) '|');
			nextHLine -= ($max - $min) / VERTICAL_TICK_MARKS;
		} else {
			s = repeat(' ', 12) # (if ($frame) '|' else ' ');
		};
		for (x = 0; x < $width; ++x) {
			bg = (if (0 <= ym && 0 > yn && (x & 1) == 1) '-' else ' ');
			if (x == zeroX) bg = (if (bg !== ' ') '+' else '''');
			s #= $charset{if (y0[x] > ym || y1[x] <= yn) 0 else if (y0[x] > yh) 3 else if (y1[x] <= yh) 1 else 2}
		};
		print(s # if ($frame) '|');
		ym = yn;
	};
	if ($frame) print(repeat(' ', 12) # '\' # repeat('=', $width) # '/');
	s0 = s1 = '';
	for (i = 0; i <= HORIZONTAL_TICK_MARKS; ++i) {
		h = floor(13 + ($width - 1) * (i / HORIZONTAL_TICK_MARKS));
		x = $from + ($to - $from) * (i / HORIZONTAL_TICK_MARKS);
		x = precision(if (abs(x) < 1e-200 + ($to - $from) * 1e-12) 0 else x, 4);
		h2 = h - length(x) \ 2;
		if (length(s1) < h2) {
			s0 #= repeat(' ', h - length(s0));
			s0 #= '|';
			s1 #= repeat(' ', h2 - length(s1));
			s1 #= x;
		}
	};
	print(s0);
	print(s1);
	( void )
};

// FIX : drop, just a lab
/* 			s #= (if (y0[x] <= ym && y1[x] > yn) {
				w = min((y1[x] - yn) / k, 1) - max((y0[x] - yn) / k, 0);
				'.:-=+*#%@'{floor(8.9999 * w)}
			} else bg);
			
	Doesn't look good to weigh this simply. Would be better to match min/max with bottom/top of different chars like:
	_.=-"`¨ and so on...
*/

generate = function {
	vargs(@a, @n, @fn, , @from, @to);
	defaults(@from, 0, @to, 1);

	prune(a);
	[a].n = n;
	k = (to - from) / (n - 1);
	for (i = 0; i < n; ++i) [a][i] = fn(from + i * k, i);
	( a )
};

if (!exists(@origCompose)) origCompose = compose;
compose = function { prune($0); invoke('origCompose', , @$) };
transform = function { args(@a, @fn); for (i = 0; i < [a].n; ++i) [a][i] = fn([a][i]); prune(@[a].$); ( a ) };
sum = function { if (!exists(@[$0].$sum)) { [$0].$sum = 0; for (i = 0; i < [$0].n; ++i) [$0].$sum += [$0][i] }; ( [$0].$sum ) };
avg = function { sum($0) / [$0].n };
rms = function { if (!exists(@[$0].$sum2)) [$0].$sum2 = { s = 0; for (i = 0; i < [$0].n; ++i) s += sqr([$0][i]) }; ( sqrt([$0].$sum2 / [$0].n) ) };
variance = function { if (!exists(@[$0].$sum2m)) [$0].$sum2m = { m = avg($0); s = 0; for (i = 0; i < [$0].n; ++i) s += sqr([$0][i] - m) }; ( [$0].$sum2m / ([$0].n - 1) ) };
variancep = function { if (!exists(@[$0].$sum2m)) [$0].$sum2m = { m = avg($0); s = 0; for (i = 0; i < [$0].n; ++i) s += sqr([$0][i] - m) }; ( [$0].$sum2m / [$0].n ) };
minimum = function { if (!exists(@[$0].$min)) [$0].$min = invoke('min', , $0); ( [$0].$min ) };
maximum = function { if (!exists(@[$0].$max)) [$0].$max = invoke('max', , $0); ( [$0].$max ) };
stdev = function { sqrt(variance($0)) };
stdevp = function { sqrt(variancep($0)) };

histogram = function {
	vargs(@a, @data, @bins, , @mini, @maxi);
	defaults(@mini,0 , @maxi,1);
	
	prune(a);
	fill(a, 0, bins, 0);
	iterate(data, >if ($2 >= mini && $2 <= maxi) ++[a][min(floor(($2 - mini) * bins / (maxi - mini)), bins - 1)]);
	( a )
};

// Pearson product-moment correlation coefficient, 0 is no correlation, 1 is maximum linear correlation, -1 is inverted correlation
// TODO: add optional weight array (which could be aWeights * bWeights), s += weight * ..., and s / (totWeight * ...)
pmcc = function {
	args(@a, @b);
	assert(>[a].n == [b].n);
	// FIX : optimize
	avgA = avg(a);
	stdevA = stdev(a);
	avgB = avg(b);
	stdevB = stdev(b);
	s = 0;
	for (i = 0; i < [a].n; ++i) s += (([a][i] - avgA) / stdevA) * (([b][i] - avgB) / stdevB);
	s / ([a].n - 1)
};
ln = log;
lg = log10;
lb = log2;
lerp = function { $0 + ($1 - $0) * $2 };

// FIX : the following is supposed to be very good... but is it? see http://fogbugz.nuedge.net/default.asp?W43
uniformRandom.NORM = 1 / ~0;
uniformRandom.seed = 2463534242;
uniformRandom = function {
	y = uniformRandom.seed;
	y ^= y << 13;
	y ^= y >> 17;
	( (::uniformRandom.seed = y ^ (y << 5)) * uniformRandom.NORM )
};

normalRandom.next = void;
normalRandom = function {
	if ((z0 = normalRandom.next) !== void) ::normalRandom.next = void
	else {
		r = sqrt(-2 * log(uniformRandom()));
		p = 2 * PI * uniformRandom();
		z0 = r * cos(p);
		::normalRandom.next = r * sin(p);
	};
	( z0 )
};

// bisect is a fairly slow root finder but it is guaranteed to find a root if ((fn(low) < y) != (fn(high) < y)) (otherwise it is a game of luck).
bisect = function {
	args(@fn, @y, @low, @high);

	if (fn(high) < fn(low)) swap(@low, @high);
	for (x = low + (high - low) * 0.5; x != low && x != high; x = low + (high - low) * 0.5)
		(if (fn(x) < y) low else high) = x;
	( x )
};

// secant is much faster than bisect, and can find results outside of x0 and x1, but is more likely to miss roots (no guaratees)
secant = function {
	args(@fn, @y, @x0, @x1);
	
	f0 = fn(x1);
	d = x0 - x1;
	for (; abs(d) >= 10e-14 && abs(d) != +infinity; ) {
		f1 = fn(x1 -= d);
		d *= (f1 - y) / (f0 - f1);
		f0 = f1;
	};
	precision(x1, 13);
};

// simpsons is a 2nd degree Newton–Cotes numerical integration algorithm, https://en.wikipedia.org/wiki/Simpson%27s_rule
simpsons = function {
	args(@fn, @x0, @x1, @n);
	h = (x1 - x0) / n;
	m = 2;
	s = 0;
	for (x = x0; x <= x1; x += h) {
		r = fn(x);
		if (x == x0 || x == x1) {
			s += r;
		} else {
			m = 6 - m;
			s += r * m;
		}
	};
	s * (h / 3)
};

if ($n >= 2) {
	for (i = 2; i < $n; ++i) if (exists(@$[i])) $[i] = evaluate($[i], @::);
	invoke('plot', , @$, 1)
} else if ($n == 1) {
	print('Usage ' # $0 # ' function [from] [to] [min] [max] [width] [height] [frame] [sampling]');
};

/*
	REFLECTION: I actually think that a graph solution would be better.
	1) we could create the graph directly when parsing.
	2) we can cheaply "copy" parts of graphs (when climbing "up" for example)
	3) we could interpret inversion / simplifications and directly attach parts of another graph (e.g. "log(x) / Log(l)"
	   as an inversion of "pow(l, r)" attaches the 'r' and 'l'.
	4) it is a better demonstration of the powers of PikaScript (using newlocal etc) than this weird custom solution.
*/
// TODO : move the grammar construction out of this function and make it possible for the end-user to easily add function with inverse functions
// alternatively, treat all unknown functions as generic function with inverse inv_func or func~1 or func^-1 something
// FIX : you can't have 'n' in an expression, for some mysterious reason.
solve = function {
	vargs(@expression, , @variable);
	
	VALUE_CHARS = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_.";
	
	/*
		The conventional solution is to generate an expression tree with nodes pointing to each other and this can be
		done with Pika for sure, but I am feeling wild today so I'll make a virtual tree with paths consisting of
		strings of \ | / defining node "positions" in the tree. To make that I first need to translate the input to
		RPN form because I need to build the tree from ground up (i.e. I need to start with the last operation in the
		processing chain and not the first).
	*/
	resetQueue(@q);
	
	map(@placements, 'prefix',@grammar.prefixOps , 'infix',@grammar.binaryOps , 'postfix',@grammar.postfixOps);
	
	defineOperator => {
		vargs(@operator, @placement, @token, @binary, @precedence, @inverse);
		o = @ops[operator];
		[o].placement = placement;
		[o].token = token;
		[o].binary = binary;
		[o].precedence = precedence;
		[o].inverse = inverse;
		g = placements[placement];
		map(@[g][[g].n], 'token',token , 'operator',operator , 'precedence',precedence
				, 'evaluate',>{ pushBack(@q, [this()].operator); ( void ) });
		if (right(token, 1) === '(') map(@[g][[g].n], 'terminator',')');
		if (right(operator, 1) === ')') map(@[g][[g].n], 'associativity','right');
		[g].n++;
	};
	
	defineFunctions => {
		for (i = 0; i < $n; i += 2) {
			defineOperator($[i + 0] # '()', 'prefix', $[i + 0] # '(', false, 0, $[i + 1] # '()');
			defineOperator($[i + 1] # '()', 'prefix', $[i + 1] # '(', false, 0, $[i + 0] # '()');
		}
	};
	
	map(@grammar.prefixOps[0], 'token','(' , 'precedence',0 , 'evaluate',>(void) , 'terminator',')');
	grammar.prefixOps.n = 1;
	map(@grammar.binaryOps[0], 'token',',' , 'precedence',1 , 'evaluate',>(void));
	grammar.binaryOps.n = 1;
	grammar.postfixOps.n = 0;	
	
	// TODO : sqr -> sqrt should be +/-sqrt
	defineFunctions('cos', 'acos', 'exp', 'log', 'sin', 'asin', 'sqr', 'sqrt', 'tan', 'atan');
// FIX : temporary
defineFunctions('erf', 'ierf');
	defineOperator('abs()', 'prefix', 'abs(', false, 0, '+/-');
	defineOperator('pow()', 'infix', '^', true, 4, 'logb()');
	defineOperator('pow()', 'prefix', 'pow(', true, 0, 'logb()');
	defineOperator('logb()', 'prefix', 'logb(', true, 0, 'pow()');
	defineOperator('nroot()', 'prefix', 'nroot(', true, 0, 'nroot()');
	defineOperator('+/-', 'prefix', '+/-', false, 4, 'abs()');
	defineOperator('n', 'prefix', '-', false, 4, 'n');
	defineOperator('+', 'infix', '+', true, 2, '-');
	defineOperator('-', 'infix', '-', true, 2, '+');
	defineOperator('*', 'infix', '', true, 3, '/');
	defineOperator('*', 'infix', '*', true, 3, '/');
	defineOperator('/', 'infix', '/', true, 3, '*');
	defineOperator('=', 'infix', '=', true, 0, '=');
		
	grammar.parseValue => {
		[$1] = void;
		pushBack(@q, $0{:$i = span($0, VALUE_CHARS)});
		( $i )
	};

	// RPNelize!
	
	if (interpret(expression, @grammar) < length(expression)) throw('Syntax error');

	// Now lets grow! Root node is the empty node. The first left one would be \, the first right one / etc etc...
	
	grow => {
		tree[$0] = ($o = popBack(@q));
		if (!exists(@ops[$o].binary)) { if (find($o{0}, '.0123456789') != 0) set(@symbols, $o) }
		else if (!ops[$o].binary) grow($0 # '|')
		else { grow($0 # '/'); grow($0 # '\'); }
	};
	grow('');
	if (queueSize(@q) != 0) throw('Syntax error');
	
	// Now we can "climb up" the tree to recreate the original expression.
	
	toInfixString => {
		args(@$tree, @$path, @$precedence);
		if (!exists(@ops[$o = [$tree][$path]].binary)) ( $o )
		else {
			if (!ops[$o].binary) {
				$x = toInfixString($tree, $path # '|', ops[$o].precedence + 1);
				$fmt = (if (ops[$o].placement === 'prefix') '{ops[$o].token}{$x}' else '{$x}{ops[$o].token}')
			} else {
				$l = toInfixString($tree, $path # '\', ops[$o].precedence);
				$r = toInfixString($tree, $path # '/', ops[$o].precedence + 1);
				$fmt = (if (ops[$o].placement === 'prefix') '{ops[$o].token}{$l}, {$r}' else '{$l} {ops[$o].token} {$r}')
			};
			if (right(ops[$o].token, 1) === '(') $fmt #= ')'
			else if (ops[$o].precedence < $precedence) $fmt = '(' # $fmt # ')';
			( bake($fmt) )
		}
	};

	// Or climb down the tree to flip things over and view the expression from any given node, i.e. isolating variables.
	
	flip['\'] = '/';
	flip['/'] = '\';
	
	climbUp = function {
		args(@oldTree, @oldPath, @newTree, @newPath);
		l = length(oldPath);
		foreach(oldTree, >if ($1{:l} === oldPath) [newTree][newPath # $1{l:}] = $2);
	};
	
	// THOUGHT : could we actually push things here and rebuild the new tree... is that easier to write? we could use the interpreter perhaps to write things like 'l / r' instead?? or should we use the interpreter to "prebuild" tree segments (with references to where 'l' and 'r' should be put)?
	
	climbDown = >{
		args(@$oldTree, @$oldPath, @$newTree, @$newPath);
		$d = right($oldPath, 1);
		$t = chop($oldPath, 1);
		if ($oldPath === '') [$newTree][$newPath] = '?'
		else if (!exists(@ops[$o = [$oldTree][$t]].binary)) [$newTree][$newPath] = $o
		else if (!ops[$o].binary) {
			climbDown($oldTree, $t, $newTree, $newPath # '|');
			[$newTree][$newPath] = ops[$o].inverse;
		} else {
			if ($o === '*' || $o === '+') {
				climbDown($oldTree, $t, $newTree, $newPath # '\');
				climbUp($oldTree, $t # flip[$d], $newTree, $newPath # '/');
				[$newTree][$newPath] = ops[$o].inverse;
			} else if ($o === '/' || $o === '-') {
				climbDown($oldTree, $t, $newTree, $newPath # $d);
				climbUp($oldTree, $t # flip[$d], $newTree, $newPath # flip[$d]);
				[$newTree][$newPath] = (if ($d === '/') $o else ops[$o].inverse);
			} else if ($o === 'pow()') {
				climbDown($oldTree, $t, $newTree, $newPath # '/');
				climbUp($oldTree, $t # flip[$d], $newTree, $newPath # '\');
				[$newTree][$newPath] = (if ($d === '/') 'logb()' else 'nroot()');
			} else if ($o === 'logb()') {
				climbDown($oldTree, $t, $newTree, $newPath # $d);
				climbUp($oldTree, $t # flip[$d], $newTree, $newPath # flip[$d]);
				[$newTree][$newPath] = (if ($d === '/') 'pow()' else 'nroot()');
			} else if ($o === 'nroot()') {
				climbDown($oldTree, $t, $newTree, $newPath # '\');
				climbUp($oldTree, $t # flip[$d], $newTree, $newPath # '/');
				[$newTree][$newPath] = (if ($d === '/') 'pow()' else 'logb()');
			} else if ($o === '=') {
				climbUp($oldTree, $t # flip[$d], $newTree, $newPath);
			}
		}
	};
	
	if (!exists(@variable)) clone(@symbols, @solveFor)
	else set(@solveFor, variable);
	
	found = false;
	foreach(@solveFor, >{
		solveVar = $1;
		foreach(@tree, >{
			if ($2 === solveVar) {
				prune(@newTree);
				newTree['\'] = solveVar;
				newTree[''] = '=';
				climbDown(@tree, $1, @newTree, '/');
				if (found) print('<=>');
				print('    ' # toInfixString(@newTree, void, 0));
				found = true;
			}
		});
	});
	if (!found) print("Solution variable not found.");
};

// FIX : lab below

normalPDF = function {
	args(@x, @mean, @variance);
	( 1 / sqrt(2 * PI * sqr(variance)) * exp(-sqr(x - mean) / (2 * sqr(variance))) )
};

normalCDF = function {
	args(@x, @mean, @variance);
	0.5 * (1 + erf(x - mean) / (variance * sqrt(2)));
};


erf = function {
	if (abs($0) >= 4.0) sign($0) * 0.999999985
	else {
		y = 0;
		for ({ i = 0; p = 1 }; { ly = y; y += $0 / (2 * i + 1) * p; y != ly }; p *= -$0 * $0 / ++i) ;
		( 1.1283791670955125738961 * y )
	}
};

// TODO : real implementation
ierf = function { sign($0) * secant(erf, abs($0), 0.4, 0.6) };

// TODO : really? used in mtpgAnalysis now
WEIGHTED_ASCII_CHARS = ' .:-=+*#%@';
weightedAsciiString = function {
	vargs(@data, , @mini, @maxi, @charset);
	defaults(@mini, 0, @maxi, 1, @charset, WEIGHTED_ASCII_CHARS);
	s = '';
	l = length(charset);
	iterate(data, >s #= charset{min(max(floor(l * ($2 - mini) / (maxi - mini)), 0), l - 1)});
	( s )
};

( void )

/*
	Radial:
	
	for (y = 0; y < 35; ++y) print(weightedAsciiString(generate(@a, 80, >sin($0) * sin(y / 35 * PI), 0, PI)))
	
	HAHA. Mandelbrot:
	
	for({i=-1;s=''};i<1;{i+=0.06;print(s);s=''}) for(r=-2;{I=i;(R=r)<1};{r+=0.03;s#=char(n+31)}) for(n=0;{b=I*I;26>n++&&R*R+b<4};{I=2*R*I+i;R=R*R-b+r});
*/
/*

	5 multiplications, 5 add / sub
	f = function {
		b = 1.2290385962 * $0; b *= b; c = b - 1.2072633505; d = c * c; (1 - (d + d - c) * (d + 1.7122753859) * b);
	};
	plot(>(f($0)-cos(2*PI*$0)), -0.5, 0.5)

6 multiplications, 4 add / sub = 10 ops
{ x = $0; b = sqr(0.9454327822 * x); c = b - 1.7657041550; d = sqr(c); ( 1 - d * (d + c) * b * (d + 2.1211326122) ) }

polynomial equivalent (8 mults, 7 add / sub = 15 ops):
-(0.4558575993338201*x^14)+4.893028900318701*x^12-(22.85592808226951*x^10)+58.58722812702301*x^8-(85.12194794117738*x^6)+64.91057026125679*x^4-(19.73838349694066*x^2)+1

((((((-(0.4558575993338201*x^2)+4.893028900318701)*x^2-22.85592808226951)*x^2+58.58722812702301)*x^2-85.12194794117738)*x^2+64.91057026125679)*x^2-19.73838349694066)*x^2+1

*/

