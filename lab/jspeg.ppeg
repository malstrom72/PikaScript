# this one works (except actions and captures), but is slow with:
#
#  . [a-z] (should create expressions instead of indexOf)
#  . creating millions of anonymous functions every single time it needs a new local var
#  . parsing through shared _i, perhaps we can return i instead (and < 0 is false?)

{
	$$parser.dqEscape = function { chop(escape($0 # "'"), 2) # '"' };
}

# ----------------------------------------------------------------------------------------------------------------------

root		<-								{
												fn = "(function(_s, $dd, $iref, $rule) {\n"
											}
				( Spacing b=PikaBlock		{ fn #= replace($b, "\x24\x24parser.", '') # ';' }
				)? Spacing g:Grammar		{
												fn #= $g;
												fn #= "var _i=0,_im=0;
												if (root($dd)) { /*[$iref] = _i; */ return true }
												else { /* [$iref] = _im;*/ return false }\n})\n";
												print(fn);
											}

# ----------------------------------------------------------------------------------------------------------------------


#############################
#    Hierarchical syntax    #
#############################


# ----------------------------------------------------------------------------------------------------------------------

Grammar		<-								{ $$ = '' }
				Spacing ( d:Definition		{ $$ #= $d # ";\n" }
				)* EndOfFile

# ----------------------------------------------------------------------------------------------------------------------

Definition	<-	id:Identifier LEFTARROW		{ $$.tag = '$0'; $$.vi = 0 }
					Expression				{ $$ = 'function ' # $id # '(){return ' # $$ # '}' }

# ----------------------------------------------------------------------------------------------------------------------

Expression	<-								{ $s.vi = $$.vi + 1; $s.tag = $$.tag; $$ = '' }
				s:Sequence					{ $$ = $s }
				( SLASH s:Sequence			{ $$ #= '||' # $s }
				)*							{ $$ = '(function(){var $b=_i;return ' # $$ # '})()' }

# ----------------------------------------------------------------------------------------------------------------------

Sequence	<-								{ $p.vi = $$.vi; $p.tag = $$.tag; $$ = '' }
				( p:(Prefix / Action)		{ $$ #= (if ($$ != '') '&&') # $p }
				)*							{ $$ #= (if ($$ == '') 'true' else '||(_im=(_i>_im?_i:_im),_i=$b,false)') }

# ----------------------------------------------------------------------------------------------------------------------

Action		<-	b=PikaBlock Spacing			{
												for ($s = '{'; $b != ''; ) {
													$s #= $b{:i = find($b, "$/\t\r\n")};
													if (($b = $b{i:}){0} == '$') {
														if ($b{:9} == "\x24\x24parser.") { $s #= ''; $b = $b{9:} }
														else if ($b{:3} == "\x24\x24s") { $s #= '_s'; $b = $b{3:} }
														else if ($b{:3} == "\x24\x24i") { $s #= '_i'; $b = $b{3:} }
														else if ($b{:2} == "\x24\x24") { $s #= '[$0]'; $b = $b{2:} }
														else { $s #= '$'; $b = $b{1:} }
													} else if ($b{:2} == '//') {
														$s #= $b{:i = find($b, "\n") + 1};
														$b = $b{i:}
													} else if ($b{0} == '/') { $s #= '/'; $b = $b{1:} }
													else {
														if ($s{length($s) - 1} != ' ') $s #= ' ';
														$b = $b{span($b, "\t\r\n "):}
													}
												};
												$$ = $s # ';true}'
											}
												
# ----------------------------------------------------------------------------------------------------------------------

Prefix		<-								{ $c.vi = $$.vi; $c.tag = $$.tag }
				AND c:Capture				{ $$ = '(function(){var $l=_i' # ',$x=' # $c # ';_i=$l;return $x})()' }
				/ NOT c:Capture				{ $$ = '(function(){var $l=_i' # ',$x=' # $c # ';_i=$l;return !$x})()' }
				/ Capture

# ----------------------------------------------------------------------------------------------------------------------

Capture		<-	v:Variable EQUALS Tagged	{ $$ = '(function(){var $m=_i;return ' # $$ # '&&(' # $v # ' = _s.substring($m,_i))})()' }
				/ Tagged

# ----------------------------------------------------------------------------------------------------------------------

Tagged		<-	v:Variable COLON			{ $t.vi = $$.vi; $t.tag = '@' # $v }
					t:Suffix				{ $$ = $t }
				/ Suffix
				
# ----------------------------------------------------------------------------------------------------------------------

Suffix		<-	Primary ( QUESTION			{ $$ = '(' # $$ # ',true)' }
						  / STAR			{ $$ = '((function(){while(' # $$ # ');})(),true)' }
						  / PLUS			{ $$ = '((function(){for(var $n=0;' # $$ # ';++$n);return $n>0})())' }
				)?

# ----------------------------------------------------------------------------------------------------------------------

Primary		<-	Identifier !LEFTARROW		{ $$ #= '()'/* # $$.tag # ')'*/ }
				/ Literal					{
												l = length($$);
												if (l == 0) $$ = 'true'
												else if (l == 1) $$ = '(_s[_i]===' # $$parser.dqEscape($$) # ')&&(++_i,true)'
												else $$ = '(_s.substr(_i,' # l # ')===' # $$parser.dqEscape($$)
														# ')&&(_i+=' # l # ',true)'
											}
				/ Class						{ $$ = '(!!_s[_i]&&' # $$parser.dqEscape($$) # '.indexOf(_s[_i])>=0)&&(++_i,true)' }
				/ DOT						{ $$ = '(!!_s[_i])&&(++_i,true)' }
				/ OPEN Expression CLOSE

# ----------------------------------------------------------------------------------------------------------------------


########################
#    Lexical syntax    #
########################


# ----------------------------------------------------------------------------------------------------------------------

Identifier	<-	$$=(IdentStart IdentCont*) Spacing

# ----------------------------------------------------------------------------------------------------------------------

IdentStart	<-	[a-zA-Z_]

# ----------------------------------------------------------------------------------------------------------------------

IdentCont	<-	IdentStart / [0-9] 

# ----------------------------------------------------------------------------------------------------------------------

Variable	<-	( '$$'						{ $$ = '[$0]' }
				  / $$=PikaVar				{ $$ = '$' # $$ }
				) Spacing

# ----------------------------------------------------------------------------------------------------------------------

Literal		<-								{ $$ = '' }
				['] ( !['] c:Char			{ $$ #= $c }
				)* ['] Spacing
				/ ["] ( !["] c:Char			{ $$ #= $c }
				)* ["] Spacing

# ----------------------------------------------------------------------------------------------------------------------

Class		<-								{ $$ = '' }
				'[' ( !']' r:Range			{ $$ #= $r }
				)* ']' Spacing

# ----------------------------------------------------------------------------------------------------------------------

Range		<-	f:Char '-' t:Char			{ $$ = ''; for (i = ordinal($f); i <= ordinal($t); ++i) $$ #= char(i); }
				/ $$:Char

# ----------------------------------------------------------------------------------------------------------------------

Char		<-	"\\" x=[nrt'"\[\]\\]		{ $$ = "\n\r\t'\"[]\\"{find("nrt'\"[]\\", $x)} }
				/ "\\" x=([0-3][0-7][0-7])	{ $$ = char($x{0} * 64 + $x{1} * 8 + $x{2}) }
				/ "\\" x=([0-7][0-7])		{ $$ = char($x{0} * 8 + $x{1}) }
				/ "\\" x=([0-7])			{ $$ = char($x{0}) }
				/ ![\\\0-\37] $$=.

# ----------------------------------------------------------------------------------------------------------------------

Spacing		<-	(Space / Comment)*

# ----------------------------------------------------------------------------------------------------------------------

Comment		<-	'#' (!EndOfLine .)*
				(EndOfLine / EndOfFile)

# ----------------------------------------------------------------------------------------------------------------------

Space		<-	' ' / "\t" / EndOfLine

# ----------------------------------------------------------------------------------------------------------------------

EndOfLine	<-	"\r\n" / "\n" / "\r"

# ----------------------------------------------------------------------------------------------------------------------

EndOfFile	<-	!.

# ----------------------------------------------------------------------------------------------------------------------


#################
#    Actions    #
#################


# ----------------------------------------------------------------------------------------------------------------------

PikaVar		<-	[a-zA-Z_] ('.'? [a-zA-Z$_0-9])*

# ----------------------------------------------------------------------------------------------------------------------

PikaBlock	<-	'{' ( &'{' PikaBlock
					/ &["'] PikaString
					/ &('/*' / '//') PikaComment
					/ !'}' .
					)* '}'

# ----------------------------------------------------------------------------------------------------------------------

PikaString	<-	'"' ( ('\\' / !'"') . )* '"'
				/ "'" ( ("''" / !"'" .) )* "'"

# ----------------------------------------------------------------------------------------------------------------------

PikaComment	<-	'/*' (!'*/' .)* '*/'
				/ "//" (!EndOfLine .)* (EndOfLine / EndOfFile)

# ----------------------------------------------------------------------------------------------------------------------


################
#    Tokens    #
################


# ----------------------------------------------------------------------------------------------------------------------

LEFTARROW	<-	'<-' Spacing
SLASH		<-	'/' Spacing
AND			<-	'&' Spacing
NOT			<-	'!' Spacing
QUESTION	<-	'?' Spacing
STAR		<-	'*' Spacing
PLUS		<-	'+' Spacing
OPEN		<-	'(' Spacing
CLOSE		<-	')' Spacing
DOT			<-	'.' Spacing
COLON		<-	':' Spacing
EQUALS		<-	'=' Spacing

# ----------------------------------------------------------------------------------------------------------------------
