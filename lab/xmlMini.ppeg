# Example of input and output
#
# ' <test a = "1"  b="2"  c="3"  a="one" >hej<smurf durf=''blurf''/>du &amp; <![CDATA[<humptidumpti>]]> glade</test> '
#
#  ['1.contents.0.element'] = @::2;
#  ['1.contents.n'] = 1;
#
#  ['2.type'] = 'test';
#  ['2.attributes.a'] = 'one';
#  ['2.attributes.b'] = 2;
#  ['2.attributes.c'] = 3;
#  ['2.contents.0.text'] = 'hej';
#  ['2.contents.1.element'] = @::3;
#  ['2.contents.2.text'] = 'du &amp; ';
#  ['2.contents.3.cdata'] = <humptidumpti>;
#  ['2.contents.4.text'] = ' glade';
#  ['2.contents.n'] = 5;
#
#  ['3.type'] = 'smurf';
#  ['3.attributes.durf'] = 'blurf';

root            <-  															{ $$ = new(Container); [$$].contents.n = 0; }
					contents !.
element			<-	(															{ $$ = void; }
					'<!--' (!'--' .)* '-->'
					/ '<!' (!'>' ('[' (e:element / '%' name ';' / _)* ']' / s:string / .))* '>'
					/ '<?' (!'?>' .)* '?>'
					/ '<' n=name												{ $$ = new(Container); [$$].type = $n; }
						(_ a=name _? '=' _? v:string							{ [$$].attributes[$a] = $v; }
						)* _? ('/>' / ('>'										{ [$$].contents.n = 0; }
							contents '</' n2=name _? '>'						{ if ($n !== $n2) throw('XML end-tag does not match start-tag') }
						))
					) _?
contents		<-	_? (d=(!'<' .)+												{ [$$].contents[[$$].contents.n++].text = $d; }
					/ '<![CDATA[' c=(!']]>' .)* ']]>'							{ [$$].contents[[$$].contents.n++].cdata = $c; }
					/ e:element													{ if ($e != void) [$$].contents[[$$].contents.n++].element = $e; }
					)*	
name            <-  [-.0-9:_A-Za-z\300-\326\330-\366\370-\377]+
string			<-  ('"' $$=(!'"' .)* '"') / ("'" $$=(!"'" .)* "'")
_               <-  [ \t\r\n]+
