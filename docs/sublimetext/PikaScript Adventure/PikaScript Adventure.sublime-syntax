%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - adv
scope: source.adv

variables:
  quoted_string: '\"(?:[^\"\\]|\\.)*?\"'
  and_else_also: '$\n?|\b(and|och|otherwise|annars|[Aa]lso|[Dd]essutom|[Ss]amt)\b'

contexts:
  main:
    - match: '^(ignore:)(.*)$'
      captures:
        1: keyword.declaration.ignore.adv
        2: text.input.adv
    - match: '^(synonym:)(.*?)(=)(.*)$'
      captures:
        1: keyword.declaration.synonym.adv
        2: text.input.adv
        3: punctuation.separator.adv
        4: text.input.adv
    - match: '^(var:)(.*?)(=)'
      captures:
        1: keyword.declaration.variable.adv
        2: variable.other.adv
        3: punctuation.separator.adv
      push: inside_var_definition
    - match: '^(>)(.*?)(:)'
      captures:
        1: punctuation.definition.adv
        2: text.input.adv
        3: punctuation.separator.adv
      push: inside_script
    - match: '^# .*$|^--+$'
      scope: text.heading.adv
    - match: '^(:)'
      captures:
        1: punctuation.definition.adv
      push: inside_script
    - match: '^ |\t'
      push: inside_script
    - match: '^\w+.*$'
      scope: text.output.adv

  inside_var_definition:
    - match: \[.*?\]
      scope: constant.other.state.default.adv
    - match: \w*
      scope: constant.other.state.adv
    - match: '$\n?'
      pop: true

  inside_script:
    - meta_scope: source.adv
    - match: '\b([Ww]rite|[Ss]kriv)\s+'
      scope: keyword.control.adv
      push: write
    - match: '\b([Gg]o\s+(to\s+((the\s+)?(location\s+))?)?|[Gg]å\s+(till\s+(plats(en)?\s+)?)?)'
      scope: keyword.control.adv
      push: goto
    - match: '\b((the\s+)?[Ss]ame\s+(as\s+)?|[Ss]amma\s+(som\s+)?)'
      scope: keyword.control.adv
      push: same_as
    - match: '\b([Ii]f(\s+the)?|[Oo]m)\s+'
      scope: keyword.control.adv
      push: if_variable
    - match: '\b([Cc]hange|[Ss]et|[Ää]ndra|[Ss]ätt)\s+(the\s+)?'
      scope: keyword.control.adv
      push: change_variable
    - match: '\b([Mm]ake|[Gg]ör)\s+(the\s+)?'
      scope: keyword.control.adv
      push: make_variable
    - match: '\b([Aa]lltid|[Aa]lways|also|dessutom|samt|Also|Dessutom|Samt|and|then|och|sen|or|eller|the|make|gör|Make|Gör|describe|beskriv|Describe|Beskriv|location|platsen|plats|if|om|If|Om|then|så|otherwise|annars|is|are|not|isn''t|aren''t|inte|är|to|till)\b'
      scope: keyword.control.adv
    - match: '\w+'
      scope: text.input.adv
    - match: ':'
      scope: punctuation.definition.adv
    - match: '\.'
      scope: punctuation.separator.adv
    - match: '{{quoted_string}}'
      scope: text.input.adv
    - match: '$\n?'
      pop: true

  write:
    - meta_scope: text.output.print.adv
    - match: '{{quoted_string}}'
      pop: true
    - match: '{{and_else_also}}'
      scope: keyword.control.adv
      pop: true

  goto:
    - meta_scope: text.location.adv
    - match: '{{quoted_string}}'
      pop: true
    - match: '{{and_else_also}}'
      scope: keyword.control.adv
      pop: true
    - match: '\.'
      scope: punctuation.separator.adv
      pop: true

  same_as:
    - meta_scope: text.input.adv
    - match: '{{quoted_string}}'
      pop: true
    - match: '{{and_else_also}}'
      scope: keyword.control.adv
      pop: true
    - match: '\.'
      scope: punctuation.separator.adv
      pop: true

  if_variable:
    - meta_content_scope: variable.other.adv
    - match: '{{quoted_string}}'
      scope: variable.other.adv
    - match: '\b((is|are)(\s+not|n''t)?|(inte\s+)?är)\s+'
      scope: keyword.control.adv
      set: if_value

  if_value:
    - meta_content_scope: constant.other.state.adv
    - match: '{{quoted_string}}'
      scope: constant.other.state.adv
    - match: '\b(or|eller)\s+(?!(((?!\band|or|but|och|eller|men\b)\w+\s+?)+|{{quoted_string}}\s+)((is|are)(\s+not|n''t)?|(inte\s+)?är)\s+)'
      scope: keyword.control.adv
    - match: ','
      scope: punctuation.separator.adv
    - match: '\b((and|or|but)(\s+the)?|och|eller|men)(\s+if)?(\s+the)?\s+'
      scope: keyword.control.adv
      set: if_variable
    - match: '(?=\b(then|så|[Gg]o|[Gg]å|[Ww]rite|[Ss]kriv|[Cc]hange|[Ss]et|[Ää]ndra|[Ss]ätt|[Ss]ame|[Dd]escribe)\b)'
      pop: true

  change_variable:
    - meta_scope: variable.other.adv
    - match: '{{quoted_string}}'
      scope: variable.other.adv
    - match: '\b(to|till)\s+'
      scope: keyword.control.adv
      set: change_value

  change_value:
    - meta_scope: constant.other.state.adv
    - match: '{{quoted_string}}'
      scope: constant.other.state.adv
      pop: true
    - match: '{{and_else_also}}'
      scope: keyword.control.adv
      pop: true
    - match: '\.'
      scope: punctuation.separator.adv
      pop: true

  make_variable:
    - meta_scope: variable.other.adv
    - match: '{{quoted_string}}'
      scope: variable.other.adv
      set: make_value
    - match: '\w+\s+'
      scope: variable.other.adv
      set: make_value

  make_value:
    - meta_content_scope: constant.other.state.adv
    - match: '{{quoted_string}}'
      scope: constant.other.state.adv
      pop: true
    - match: '{{and_else_also}}'
      scope: keyword.control.adv
      pop: true
    - match: '\.'
      scope: punctuation.separator.adv
      pop: true
