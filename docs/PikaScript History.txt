 PikaScript grew out of experiments to create the tiniest possible scripting language. The first prototype, PicoScript,
was written in just a few days and represented all values as strings. It supported basic C-style expressions and treated
all statements as expressions too. Variable references were added early, but the initial approach—using ^ to count
call-frame distance—quickly ran into problems. It wasn’t safe to store such references in global variables.

 To address this, the language evolved into PikoScript. It assigned numeric depth levels to each frame and embedded that
into reference values and closures. References like @:3:x became possible, and variable types were upgraded to a proper
union of bool, double, and dynamically allocated string. But the added complexity worked against the original goal of
minimalism.

 So the project was stripped back again as YoctoScript. Frame references were dropped entirely, along with ternary ?:,
while, and do loops. All variables were global except locals marked with a $ prefix. Values were again just strings.
This version was extremely simple, but the lack of local scopes and structured references made it hard to do anything
non-trivial.

 PikaScript, the final version, aimed for a balance. It reintroduced frames and references, but with globally unique
frame identifiers rather than relative depths. This eliminated the need for checking up/down access rules and allowed
closures to work more reliably. It also added features like variable enumeration (enabling foreach), the ^ prefix for
accessing caller frames, and other structural improvements—all while keeping the interpreter under a thousand lines of
standard C++ with no heap allocations and no garbage collection.

The first product to ship with PikaScript was Synplant 1.0, where it controlled GUI interaction with the plugin backend.

 In Microtonic 3.0, released in early 2011, PikaScript was exposed to users for the first time. Dropping .pika files
into a special folder added them to a cog-wheel menu, where they could be launched to automate repetitive tasks like
patch exports, pattern randomisation, or batch editing. The first official script pack was released in May that year.

 Newer Sonic Charge plug-ins now use a custom JavaScript engine instead (NuXJS), but PikaScript is still supported for
legacy scripts and internal tools. The core language has remained unchanged since 2008.
