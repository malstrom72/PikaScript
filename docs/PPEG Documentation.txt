PPEG
####

What is PPEG?
=============

PPEG is a parser generator written in PikaScript. It consumes grammars described using Parsing Expression
Grammars (PEG) and produces parser functions. All related files live in the `tools/ppeg` folder. The runtime
interface `ppeg.pika` loads the generated `initPPEG.pika` and exposes the `PPEG` class used to build parsers.
The folder also holds the grammar sources and an `updatePPEG.pika` script for regenerating `initPPEG.pika`.

Global vs Local Compilers
=========================

The project provides two self-hosted grammars:

- `tools/ppeg/ppegGlobal.ppeg` – builds parser functions stored in whatever dictionary `ppeg.$compileTo`
  points at. This variant uses global variables and is what regenerates PPEG itself (`initPPEG.pika`).
- `tools/ppeg/ppegLocal.ppeg` – returns a self-contained parsing function. It relies on no globals and is
  easier to embed in other projects.

The global grammar stores generated parser functions in the dictionary referenced by `ppeg.$compileTo`. By
default this is the `ppeg` module itself, allowing the compiler to recompile its own implementation. The local
grammar instead returns a closure acting as the parser so it can be used without touching any globals.

Running the Compilers
=====================

1. Build the command line tool used to run scripts:

   ```bash
   cd tools/PikaCmd/SourceDistribution
   bash BuildPikaCmd.sh       # or BuildPikaCmd.cmd on Windows
   ```

2. Run the regression test that exercises both compiler variants:

   ```bash
   ./PikaCmd ../../tests/ppegTest.pika
   ```

   The test first uses the **global** compiler and then the **local** one. Both must compile themselves
   successfully for the test to pass.

Regenerating the PPEG Implementation
====================================

After changing a grammar, refresh `initPPEG.pika` with:

```bash
./PikaCmd ../../tools/ppeg/updatePPEG.pika
```

The same script can be run to experiment directly with the compilers. It rebuilds both variants and writes the
new implementation to `initPPEG.pika` if everything succeeds.

Example: Using the Local Compiler
=================================

Below is a minimal example that compiles `examples/digits.ppeg` into a local parsing function and runs it:

```pika
include('stdlib.pika');
include('ppeg.pika');

src = load('examples/digits.ppeg');
parseDigits = ppeg.compileFunction(src);

assert(> parseDigits('12345'));
assert(> !parseDigits('12a45'));
```
