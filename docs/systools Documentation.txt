systools
########

What is systools?
=================

 systools.pika is a compact portable helper library distributed with
 PikaCmd. It bundles cross-platform file utilities together with an
 improved `include()` that tracks where scripts are running from. By
 loading this script alongside `stdlib.pika` you gain a toolbox for
 manipulating files, running shell commands and resolving paths.

Loading the helper
------------------

 Include `systools.pika` near the start of a script after `stdlib.pika`:

     include('stdlib.pika');
     include('systools.pika');

 This makes the functions and constants described below available.

Functions
=========

include
run
appendDirSlash
removeDirSlash
dirOfPath
basenameOfPath
filenameOfPath
extensionOfPath
splitPath
shell
pipe
eraseFile
moveFile
copyFile
makeDir
removeDir
renameFile
concatFiles
fromNativePath
toNativePath
quotePath
quoteWildcardPath
currentDir
dir
fileSize
pathExists
isFileNewer
sleep
randomFilename
makeTempDir
wipeTempDir

include
=======

Syntax
------
    include('filename')

Description
-----------
Improved 'include' that looks for include files in a list of search
paths. Use `include.addSearchPath()` or the environment variable
PIKAINCLUDE to define search paths. Include files will also be searched
in the same directory as the currently executing script. The global
`::run.root` contains this directory path.

run
===

Syntax
------
    run('filename')

Description
-----------
Loads and immediately executes the file. Before running, `run.root` is
set to the directory of the script so that subsequent includes resolve
paths relative to that location.

appendDirSlash
==============

Syntax
------
    'pathSlash' = appendDirSlash('path')

Description
-----------
Appends '/' to `path` if its last character is not already '/', '\\' or
':'.

removeDirSlash
==============

Syntax
------
    'path' = removeDirSlash('pathSlash')

Description
-----------
Removes the last character from `pathSlash` if it is '/', '\\' or ':'. Use
this to climb a path upwards:
     parent = dirOfPath(removeDirSlash('/abc/def/ghi'))

dirOfPath
=========

Syntax
------
    'dir' = dirOfPath('path')

Description
-----------
Extracts the directory of `path` including any trailing slash.

basenameOfPath
==============

Syntax
------
    'name' = basenameOfPath('path')

Description
-----------
Extracts the base name (file name without extension) of `path`.

filenameOfPath
==============

Syntax
------
    'name' = filenameOfPath('path')

Description
-----------
Extracts the file name including extension from `path`.

extensionOfPath
===============

Syntax
------
    '.ext' = extensionOfPath('path')

Description
-----------
Extracts the extension of `path`, including the leading '.'. Returns
`void` if there is no extension.

splitPath
=========

Syntax
------
    splitPath('path', @dir, @name, @extension)

Description
-----------
Splits a full path into directory, base name and extension and writes
the values to the referenced variables.

shell
=====

Syntax
------
    +rc = shell('command', [throwOnError = true])

Description
-----------
Executes a shell command and optionally throws an exception if the
command exits with a non-zero return code.

pipe
====

Syntax
------
    'output' = pipe('command', [throwOnError = true], [@err], [@rc])

Description
-----------
Executes a shell command, captures its output and returns it. An
exception is thrown when the command exits with a non-zero return code.
Optional `@err` and `@rc` receive stderr output and return code.

eraseFile
=========

Syntax
------
    eraseFile('path', [throwOnError = true])

Description
-----------
Erases file(s). `path` may contain wildcard characters.

moveFile
========

Syntax
------
    moveFile('fromPath', 'toPath', [throwOnError = true])

Description
-----------
Moves or renames file(s). `fromPath` can contain wildcard characters.
`toPath` may or may not contain a file name.

copyFile
========

Syntax
------
    copyFile('fromPath', 'toPath', [throwOnError = true])

Description
-----------
Copies file(s). `fromPath` can contain wildcard characters. `toPath` may
or may not contain a file name.

makeDir
=======

Syntax
------
    makeDir('path', [throwOnError = true])

Description
-----------
Creates a directory. Throws if the directory already exists when
`throwOnError` is true. Intermediate directories must exist.

removeDir
=========

Syntax
------
    removeDir('path', [throwOnError = true])

Description
-----------
Removes a directory. Throws if the directory is not empty or does not
exist when `throwOnError` is true.

renameFile
==========

Syntax
------
    renameFile('path', 'newName', [throwOnError = true])

Description
-----------
Renames a file. `newName` should not contain a directory.

concatFiles
===========

Syntax
------
    concatFiles(['sources', ...], 'toPath')

Description
-----------
Concatenates all source files and writes the result to `toPath`.
`sources` may contain wildcards and `toPath` must not be one of them.

fromNativePath
==============

Syntax
------
    'path' = fromNativePath('nativePath')

Description
-----------
Converts a path in native representation (using platform separators) to
a normalized representation.

toNativePath
============

Syntax
------
    'nativePath' = toNativePath('path')

Description
-----------
Converts a path in platform-normalized representation (always using
forward slashes) to the native representation.

quotePath
=========

Syntax
------
    'quotedPath' = quotePath('path')

Description
-----------
Like `toNativePath()` but also quotes the path or escapes special
characters so that spaces and wildcards are treated as literals.

quoteWildcardPath
=================

Syntax
------
    'quotedPath' = quoteWildcardPath('path')

Description
-----------
Similar to `quotePath()` but leaves wildcard characters unescaped.

currentDir
==========

Syntax
------
    'dir' = currentDir()

Description
-----------
Returns the current working directory. There is no function to change
it.

dir
===

Syntax
------
    dir('files'|'dir/', >action, ['order' = void], [?descending = false])

Description
-----------
 Lists files matching `filesOrDir` (which may contain wildcards) or all
files in a directory and calls `>action` for each file. `order` can be
`void`, `name`, `time` or `size`. `>action` receives the file name
(without the parent directory). When a name ends with '/', it represents
a subdirectory.

fileSize
========

Syntax
------
    +bytes = fileSize('path')

Description
-----------
Returns file size in bytes.

pathExists
==========

Syntax
------
    ?found = pathExists('path')

Description
-----------
Returns true if `path` exists. `path` may contain wildcard characters.

isFileNewer
===========

Syntax
------
    ?newer = isFileNewer('comparePath', 'toPath')

Description
-----------
Returns true if `comparePath` is newer than `toPath` or if
`comparePath` exists and `toPath` does not.

sleep
=====

Syntax
------
    sleep(+secs)

Description
-----------
Pauses execution for the given number of seconds. Timing accuracy may
vary.

randomFilename
==============

Syntax
------
    'filename' = randomFilename()

Description
-----------
Returns a pseudo-random file name of eight hexadecimal characters.
There is no guarantee that such a file does not already exist.

makeTempDir
===========

Syntax
------
    'dir' = makeTempDir()

Description
-----------
Creates a directory with a guaranteed unique pseudo-random name under
`TEMP_DIR`.

wipeTempDir
===========

Syntax
------
    wipeTempDir('dir')

Description
-----------
Removes a temporary directory and all of its contents. Throws if `dir`
is not under `TEMP_DIR`. It does not throw if the directory does not
exist.

Constants
=========

 Several platform-specific constants are provided:

```
name            unix               windows
----            ----               -------
TEMP_DIR        $TMPDIR or /tmp/   %TEMP% or \\temp\\
DEV_NULL        /dev/null          NUL
DIR_SLASH       /                  \\
DIR_SLASHES     /                  /\\:
DEL_COMMAND     rm -f              DEL /Q
MOVE_COMMAND    mv                 MOVE
COPY_COMMAND    cp -fp             COPY /Y
MKDIR_COMMAND   mkdir              MKDIR
RMDIR_COMMAND   rmdir              RMDIR /Q
WIPE_DIR_COMMAND rm -Rf            RMDIR /S /Q
DIRECT_ALL_TO_NULL 1>/dev/null 2>&1  1>NUL 2>&1
```

 These constants help keep scripts portable when spawning shell commands
 or manipulating paths.
