#! /usr/local/bin/PikaCmd
if (!exists(@::modules.stdlib)) run('stdlib.pika');

INIT_STATE = '...........................OX......XO...........................;X;0';
// INIT_STATE = '.XXXXXXX..XOOOXX.OOOOXXXOOOOXOOO..OOOOOO...OO.OO....OOOO....O.X.;X;14';

map(@OPPOSITE_COLORS, 'X','O' , 'O','X');
map(@COLOR_SCORES, 'X',1 , 'O',-1 , '.',0);

onBoard = function /* (x, y) */ { (0 <= $0 && $0 < 8 && 0 <= $1 && $1 < 8) };
isPiece = function /* (piece) */ { ($0 !== '.') };
getTurnColor = function /* (state) */ { $0{65} };
getSquare = function /* (state, x, y) */ { $0{$2 * 8 + $1} };
// getScore = function /* (state) */ { if (getTurnColor($0) === 'O') -$0{67:} else $0{67:} };
getScore = function /* (state) */ { s = 0; i = 0; for (y = 0; y < 8; ++y) for (x = 0; x < 8; ++x) { s += SQUARE_SCORES[y][x] * COLOR_SCORES[$0{i}]; ++i; }; if (getTurnColor($0) === 'O') -s else s };
squareScore = function /* (x:$0, y:$1, color:$2) */ { /*SQUARE_SCORES[$0][$1] **/ COLOR_SCORES[$2] };
setSquare = function /* (state:$0, x:$1, y:$2) */ {
	i = $2 * 8 + $1;
	$0{:i} # $0{65} # $0{i + 1:65 - i - 1} # $0{65} # ';' # ($0{67:} - squareScore($1, $2, $0{i}) + squareScore($1, $2, $0{65}));
};
flipTurnColor = function /* (state:$0) */ { $0{:65} # OPPOSITE_COLORS[getTurnColor($0)] # $0{66:}; };

display = function /* (state) */ {
	print("\n" # getTurnColor($0) # "'s turn (score: " # getScore($0) # ")\n");
	for (y = 7; y >= 0; --y) {
		s = (y + 1) # ' | ';
		for (x = 0; x < 8; ++x) s #= $0{y * 8 + x} # ' ';
		print(s);
	};
	print("  +----------------\n    A B C D E F G H\n");
};

flip = function /* (state:$0, x:$1, y:$2, dx:$3, dy:$4) */ {
	original = $0;
	for ({ fc = OPPOSITE_COLORS[getTurnColor($0)]; c = void; }
			; { $1 += $3; $2 += $4; (0 <= $1 && $1 < 8 && 0 <= $2 && $2 < 8) && (c = $0{$2 * 8 + $1}) == fc }
			; $0 = setSquare($0, $1, $2));
	if (c != getTurnColor($0)) original else $0
};

place = function /* (state:$0, x:$1, y:$2) */ {
	if (getSquare($0, $1, $2) == '.') {
		original = $0;
		$0 = flip($0, $1, $2,  1,  0);
		$0 = flip($0, $1, $2,  1,  1);
		$0 = flip($0, $1, $2,  0,  1);
		$0 = flip($0, $1, $2, -1,  1);
		$0 = flip($0, $1, $2, -1,  0);
		$0 = flip($0, $1, $2, -1, -1);
		$0 = flip($0, $1, $2,  0, -1);
		$0 = flip($0, $1, $2,  1, -1);
		if ($0 != original) $0 = flipTurnColor(setSquare($0, $1, $2));
	};
	( $0 )
};

tryAll = function /* (state:$0, exec:$1) */ {
	for ({gotMove = false; i = 0}; i < 64
			&& ((newState = place($0, i % 8, i \ 8)) == $0 || { gotMove = true; $1(newState) }); ++i);
	if (!gotMove) $1(flipTurnColor($0));
	( gotMove )
};

alphaBeta = function /* (state:$0, depth:$1, alpha:$2, beta:$3) */ {
	if ($1 == 0) getScore($0)
	else {
		depth = $1; alpha = $2; beta = $3;
		tryAll($0, >{ alpha = max(alpha, -alphaBeta($0, depth - 1, -beta, -alpha)); (alpha < beta) });
		alpha
	}
};

reversiHelp = function {
	print("\nEnter moves like this: D2.\nType 'exit' to quit.\nType 'restart' to restart.\n"
			# "Type 'play' to have the computer play your color instead.\nType 'undo' to take back last move.\n");
};

init => { state = INIT_STATE; history.n = 0; display(state) };
		
				n = 9;
				for (y = 0; y < 4; ++y) for (x = y; x < 4; ++x) {
					SQUARES_MAP[y][x]
					= SQUARES_MAP[y][7 - x]
					= SQUARES_MAP[7 - y][x]
					= SQUARES_MAP[7 - y][7 - x]
					= SQUARES_MAP[x][y]
					= SQUARES_MAP[x][7 - y]
					= SQUARES_MAP[7 - x][y]
					= SQUARES_MAP[7 - x][7 - y] = n;
					--n;
				};
				for (y = 0; y < 8; ++y) for (x = 0; x < 8; ++x) SQUARE_SCORES[y][x] = 100.0;
				for (i = 0; i < 10; ++i) SCORES_X[i] = SCORES_O[i] = 100.0;
				compose(@::SCORES_O, 10, 34.975245878271, 29.226215736013, 10.859739136635, 39.038873228399, 15.216890979855, 732.85554039332, 166.452017984, 17.468995061681, 6395.0211615475);
				compose(@::SCORES_X, 20.669199085685, 87.119252266189, 13.849098891267, 10, 29.465373504617, 14.05756682934, 281.87578087657, 32.231767027128, 10, 2007.160654384);
init();
				
for (continue = true; {
	history[history.n] = state;
	ok = false;
	userHadMoves = tryAll(state, >true);
	if (!userHadMoves) {
		print('No valid move for you.');
		state = flipTurnColor(state);
		ok = true;
	} else {
ok = true;/*
		s = replace(upper(input("> ")), "-", "");
		if (s === "EXIT") continue = false
		else if (s === "UNDO") { if (history.n > 0) state = history[--history.n]; display(state) }
		else if (s === "RESTART") init()
		else {
			if (s === "PLAY") ok = true
			else if (length(s) != 2) reversiHelp()
			else {
				x = ordinal(s{0}) - ordinal('A');
				y = ordinal(s{1}) - ordinal('1');
				if (!onBoard(x, y)) reversiHelp()
				else {
					newState = place(state, x, y);
					if (newState == state) print(s{0:2} # " is not a legal move")
					else {
						state = newState;
						ok = true;
					}
				};
print(state);
			};
		}*/
	};
	if (ok) {
//		display(state);
		history.n++;
		maxi = -infinity;
//		print('Thinking...');

				if (getTurnColor(state) == 'X') { for (y = 0; y < 8; ++y) for (x = 0; x < 8; ++x) SQUARE_SCORES[y][x] = SCORES_X[SQUARES_MAP[y][x]]; }
				else { for (y = 0; y < 8; ++y) for (x = 0; x < 8; ++x) SQUARE_SCORES[y][x] = SCORES_O[SQUARES_MAP[y][x]]; };
				
		computerHadMoves = tryAll(state, >{
			score = -alphaBeta($0, 5, -infinity, -maxi);
			// display($0);
			// print('   score: ' # score);
			if (score > maxi) { maxi = score; state = $0 };
			true
		});
		if (!computerHadMoves) print('No valid move for me.');
		display(state);
		if (!userHadMoves && !computerHadMoves) {
			for ({s = 0.0; i = 0}; i < 64; ++i) s += COLOR_SCORES[state{i}];
			print(if (s < 0) 'O won.' else if (s > 0) 'X won.' else 'Tie.');
//			init();
			continue = false;
		};
	};
	( continue )
}; ) ;

