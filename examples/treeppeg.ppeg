########################################
#									   #
#		 TreePEG for PikaScript		   #
#									   #
#  Copyright 2010 NuEdge Development   #
#									   #
########################################

{
$$parser.merge = function {
	args(@source, @target);
	foreach(source, >{
		if (right($1, 2) == '.n') {
			name = chop($1, 2); 
			efaults(@[target][name].n, 0);
			concat(@[target][name], @[source][name])
		}
	});
	prune(source);
}
}

root		<- Grammar									{ $$ = "{\n\x24\x24parser.merge = " # toSource($$parser.merge) # "\n}\n" # $$ }

# Hierarchical syntax
Grammar		<- Spacing									{ $$ = '' }
			 (d:Definition								{ $$ #= $d # LF }
			 )+ EndOfFile

Definition	<-											{ $$.collect = true; $$.tmpIndex = 0; $$.target = '$$'; }
			 id:Identifier LEFTARROW Expression			{ $$ = $id # ' <- ' # '{ $$ = new(Map) } t=c:(' # replace($$, "\r\n\t", ' ', find, 1) # ') { [$$].$text = $t }' }

Expression	<- Sequence									{ $ex = $$ }
			 (SLASH Sequence							{ $ex #= '/' # $$ }
			 )*											{ $$ = $ex }
Sequence	<-											{ $sq = ''; if ($$.collect) $sq #= '{prune(@tmp' # $$.tmpIndex # ')}' }
			 (Prefix									{ $sq #= $$ # ' ' }
			 )*											{ $$ = $sq; if ($$.collect) $$ #= '{$$parser.merge(@tmp' # $$.tmpIndex # ',' # $$.target # ')}' }
Prefix		<-											{ $chr = ''; clone(@$$, @$s); }
			 chr:((AND / NOT)							{ $s.collect = false }
			 )? s:Suffix								{ $$ = $chr # $s }
Suffix		<- Primary									{ $chr = '' }
			 chr:(QUESTION / STAR / PLUS)?				{ if ($chr != '') $$ = '(' # $$ # ')' # $chr }
Primary		<- Identifier !LEFTARROW					{ if ($$.collect && upper($$) != $$) $$ #= '{append(@tmp' # $$.tmpIndex # '.' # $$ # ',$c)}' }
			 / OPEN										{ clone(@$$, @$x); if ($x.collect) $x.target = '@tmp' # $x.tmpIndex++ }
			  x:Expression CLOSE						{ $$ = '(' # $x # ')' }
			 / $$:(Literal / Class / DOT)

# Lexical syntax
Identifier	<- $$=(IdentStart IdentCont*) Spacing
IdentStart	<- [a-zA-Z_]
IdentCont	<- IdentStart / [0-9]

Literal		<- $$=(['] (!['] Char)* [']) Spacing
			 / $$=(["] (!["] Char)* ["]) Spacing
Class		<- $$=('[' (!']' Range)* ']') Spacing
Range		<- Char '-' Char / Char
Char		<- '\\' [nrt'"\[\]\\]
			 / '\\' [0-2][0-7][0-7]
			 / '\\' [0-7][0-7]?
			 / !'\\' .

LEFTARROW	<- '<-' Spacing
SLASH		<- '/' Spacing
AND			<- $$='&' Spacing
NOT			<- $$='!' Spacing
QUESTION	<- $$='?' Spacing
STAR		<- $$='*' Spacing
PLUS		<- $$='+' Spacing
OPEN		<- '(' Spacing
CLOSE		<- ')' Spacing
DOT			<- $$='.' Spacing

Spacing		<- (Space / Comment)*
Comment		<- '#' (!EndOfLine .)* (EndOfLine / EndOfFile)
Space		<- ' ' / '\t' / EndOfLine
EndOfLine	<- '\r\n' / '\n' / '\r'
EndOfFile	<- !.
