include('toC.pika');

SIZE = 13;
RADIUS = 26;
MIN_X = -SIZE;
MAX_X = SIZE;
MIN_Y = -SIZE;
MAX_Y = SIZE;

flat.n = 0;
c = 0.0;
for (y = MIN_Y; y <= MAX_Y; ++y) {
	for (x = MIN_X; x <= MAX_X; ++x) {
		d = sqrt(sqr(x) + sqr(y)) + c; // euclidian
		// d = abs(x) + abs(y); // taxi-cab
		c += 0.000000001;
		if (d <= RADIUS) {
			map(@flat[flat.n], 'd', d, 'x', x, 'y', y);
			flat.n++
		}
	}
};
qsort(0, flat.n, >flat[$0].d - flat[$1].d, >{ clone(@flat[$0], @$tmp); clone(@flat[$1], @flat[$0]); clone(@$tmp, @flat[$1]); });
for (y = MIN_Y; y <= MAX_Y; ++y) for (x = MIN_X; x <= MAX_X; ++x) dm[y][x] = void;
for (i = 0; i < flat.n; ++i) dm[flat[i].y][flat[i].x] = i;
for (y = MIN_Y; y <= MAX_Y; ++y) { s = ''; for (x = MIN_X; x <= MAX_X; ++x) { s #= dm[y][x] # "\t"; }; print(s); };

a.n = flat.n * 2;
for (i = 0; i < flat.n; ++i) { a[i * 2] = flat[i].x; a[i * 2 + 1] = flat[i].y };
print(numberArrayToC(@a, 30, "DISTANCE_ORDER"));
