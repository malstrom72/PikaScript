#! /usr/local/bin/PikaCmd

/*

	Result of first run:
	
  11.394164739856, 204.08165664633, 10, 10, 10, 12.593222844127, 41.483177035427, 58.460306032657, 10, 1271.8989285669
L 10.957823974983, 162.73278999521, 10.564426923659, 10, 10.373792556115, 12.988061407134, 35.25346004551, 52.354695537978, 10.279046384607, 1210.2432517941
  12.411438909205, 226.35152866452, 11.261110171585, 11.121398933537, 15.164234586611, 22.359135411087, 45.253920717708, 67.286016671579, 13.173743276067, 1555.1077488121
W 10.53494247195, 159.36534736334, 11.270599693985, 10.302712625915, 10, 12.225414816809, 48.396205986055, 57.714255905563, 10, 1507.5244887732
  11.125252171341, 172.54061847594, 11.476002194477, 10, 10, 11.758701357103, 35.796851969058, 51.625968587837, 10.050161336558, 1184.0790932414
  10.484939792671, 177.03272841349, 12.39431825704, 10, 10.039733347418, 13.949163660061, 32.048736911917, 52.24060524013, 10, 1373.0816408493
  10.795349563468, 187.75264288526, 10, 12.068976148349, 10.392503508565, 12.005124138276, 37.231260260059, 48.114265981148, 10, 1423.674642963
  13.239831785312, 138.9253830276, 10.855496151871, 10.671766920519, 10, 12.905813335967, 48.518530616372, 58.755537618066, 10, 1510.9679973573
  11.371135773176, 159.50603004897, 10.004901185166, 11.26201955794, 10.035219413812, 11.887011902826, 31.46349347474, 55.652515247104, 11.04719496517, 1052.1173171296
  13.829822697478, 224.69415716581, 10.891581692667, 13.510494906754, 16.032150606927, 21.681432145055, 44.346797402508, 64.301063633154, 13.236894187, 1465.0861381775

	Result of second run:
	
  115.8260797817, 566.84397837019, 23.47029071712, 38.747254194184, 20.621037807886, 14.844333034929, 181.05433037005, 21.510150588373, 14.041909134585, 5146.6240770475
  114.63252424228, 650.59494024635, 24.579566650103, 42.240974037265, 18.482301234498, 13.389534777805, 191.47720087959, 25.47506619036, 16.668318192344, 5253.0312406429
  139.4662625671, 687.73937418629, 26.444551624863, 44.598848418714, 17.702358126506, 15.578408730854, 158.60953913357, 22.717857076296, 11.77945037912, 4098.0925506787
  133.28315555759, 726.90976974633, 25.299772981326, 42.175577062074, 18.54399849808, 15.744079008827, 151.38094668864, 25.290921474822, 13.644991954174, 3924.5560372469
L 105.91259141853, 1030.0449603641, 15.237509762838, 43.127629443583, 15.414661722336, 16.543657618575, 135.28399503955, 27.931963541982, 13.428127774676, 6990.4627886732
  122.00077992567, 850.73685983159, 24.630261655594, 48.67601087192, 19.184188923142, 18.315841554614, 141.90790247739, 32.066977376424, 13.995495052487, 4147.3461675133
  126.84743830125, 670.0814516601, 23.591509988785, 40.93762970997, 16.649016186799, 15.794191538331, 178.84942831157, 24.31211412707, 15.022429826423, 4145.511336838
  129.51766452312, 658.5387931214, 23.189073423502, 42.171772219532, 18.376567379556, 17.733147147668, 137.23700169356, 20.188068746096, 13.534175103417, 4146.632065678
W 116.14452440751, 727.52026265637, 23.166374324018, 45.999159017945, 18.834686294816, 18.814970856656, 156.40192277803, 25.530405338037, 12.632250904041, 4326.0100232099
  123.95332959697, 608.00343994279, 20.444725215419, 43.235253566203, 18.685817469601, 16.812909273545, 145.62047221373, 14.526878629339, 14.604865905715, 3764.7406560268

	Result of big run (depth 0):
	
  42.102784217493, 351.99702833226, 11.330717864243, 61.021878920104, 17.255850587266, 36.050838682014, 118.81137986424, 21.861783429983, 12.328762732906, 3709.9603554926
  50.558835506053, 243.92305111824, 17.776424108549, 36.368627507212, 11.847862856803, 15.616298038649, 254.37143962826, 78.27661719769, 10, 2318.2168867484
  31.448169917352, 488.54763849798, 20.022722159115, 25.603900946722, 11.36731837659, 15.991858924009, 111.95794043248, 109.29557309086, 10, 4212.2045305437
  62.10654017729, 374.9783517289, 24.662131274966, 30.531637030708, 12.014128666666, 10, 180.01816223655, 69.291107504173, 10.398613124804, 2304.5348612146
  46.604368099773, 285.37516130716, 10, 47.093719987576, 13.980654543594, 38.478449082974, 145.43903281111, 19.69188194609, 12.02562044661, 3091.5700125314
  40.047920732099, 559.91289499492, 21.26522366453, 22.146933622503, 10, 18.473168282124, 161.71837632809, 89.907793924216, 10, 4269.6549547179
  65.875868634499, 452.42258500338, 26.698133004665, 32.695750087717, 12.547362730018, 10, 313.1754442225, 77.55166124012, 10, 3559.7112706809
  50.121925644666, 450.96003571079, 27.565671107951, 30.392097846002, 13.059472263998, 11.314256519848, 206.26815055357, 80.550738402688, 10, 2296.8693253328
  54.114960238761, 420.06985305667, 18.655631923633, 12.54439252931, 11.002051896327, 15.151605668016, 154.07843802817, 89.352013344265, 10, 6805.2978444455
  60.856223396428, 320.51069602063, 22.538338589252, 31.260242141135, 13.255021707292, 10, 173.49391869556, 71.072444962559, 10, 2850.5842916995
L 51.424227721718, 393.89455923549, 25.663031775573, 30.38402952766, 11.154058051874, 10, 204.192661212, 67.821426846778, 10, 2778.7744993315
  60.022504541858, 553.09888245827, 26.6180183101, 10.394816123608, 10.450050911291, 13.148503392446, 182.86831036757, 70.411825441237, 12.722405745521, 4980.6465976716
  72.31817640887, 887.95117104206, 22.877074042448, 22.357000647573, 10, 16.521800769219, 96.845336279362, 182.65007018019, 12.539494755745, 3474.1714784902
  63.836933011779, 371.6419720466, 29.191451930962, 10.285832648197, 11.7285703133, 15.050960034243, 192.8793944083, 72.166939733427, 12.007843008585, 5356.7049210647
  54.606740773871, 469.15285439382, 22.076191884396, 13.24156753341, 10, 13.43839945835, 152.32559068058, 93.460056602964, 10.638699417314, 7049.0618747179
  74.55819076232, 686.99161264893, 24.191878554014, 33.787413498995, 11.014982617658, 16.498345066062, 92.160994975898, 71.595906871756, 10.89126343006, 9136.0563807192
  40.569591275467, 383.52512726308, 20.82935359992, 22.35257719977, 10.066215376595, 16.823711349826, 119.93880122426, 101.47102213069, 10.490702135094, 5278.9617280187
  52.118773872269, 251.63244822577, 27.049731787158, 44.194662541643, 11.029989256978, 20.089861675717, 273.9140873717, 79.949778593919, 10, 2619.3000769978
  47.518227128634, 432.56326492714, 22.683976197273, 24.767014486209, 10.68408242556, 14.136648929456, 217.99582844566, 99.946582112902, 10.597233322784, 3289.7649204442
  58.439831313904, 501.90108970796, 21.43420634378, 12.816164319681, 10, 14.509412163767, 170.61743324027, 101.86419262446, 11.152101205198, 6780.755026046
  43.7373227906, 374.10298950611, 27.269858573259, 33.26649184133, 13.324645098182, 13.13190164959, 181.76163229631, 94.188500171834, 11.403722471067, 2664.7658969351
  42.493814181346, 567.21723282431, 19.762153620218, 24.727989448861, 10, 16.155313650029, 183.27706883217, 71.206144970664, 14.746077483592, 1744.5406746272
  60.749019874968, 359.25292702974, 11.756345910942, 50.455351474203, 15.662859018737, 30.715892290524, 109.40354108011, 24.636551208556, 13.549796453378, 3673.4299040385
  62.210474683124, 393.25045785463, 27.887413483838, 31.542053655926, 12.098160171629, 10, 151.94857814405, 66.160969190006, 10, 2049.1904623281
  43.893210563468, 450.47395209897, 13.973390276416, 61.391502775444, 18.43570703079, 34.770417659772, 169.9062226319, 17.531362094636, 14.596158481495, 2888.717230891
  54.83250726283, 451.42519959626, 18.492432887293, 17.413904528456, 10, 14.140696407472, 144.55944113838, 109.82475261278, 10, 7755.198407947
  69.409627453244, 416.05896609032, 12.912403785866, 27.33954989717, 10.216582225646, 18.869369164689, 131.53229011052, 113.10321841118, 10, 4164.1465454379
  59.969794365778, 387.90641694769, 10, 47.411640888443, 16.701528476423, 28.59433049561, 102.860618593, 24.341071180894, 14.781659952839, 4072.1577350239
  71.78045140675, 509.60609854978, 24.718882297995, 17.341514973099, 10, 14.232999500484, 207.1588855506, 66.757437509947, 13.768906942019, 7068.8786130793
  75.427293733183, 588.98732686951, 15.09363692502, 33.188502692617, 11.071025955892, 23.401384465291, 83.598954598855, 23.63460970889, 10, 4149.0288820038

	Big run after a few days (depth 0):
	
W 32.722194762675, 129.04131787674, 10, 22.397025068337, 10.094848285839, 10, 454.74943014244, 83.209701904612, 25.779334669794, 2259.2638102529
  30.313136330849, 133.41478436345, 12.481989857536, 21.561009738033, 10.920620525558, 10, 542.45026918838, 97.015455572756, 22.092615805807, 2711.5229166292
  30.239173157629, 124.49796694081, 14.339178795178, 26.772959787316, 10, 10, 527.25649621932, 84.461514085077, 27.509894068015, 2368.832238967
  23.430600102798, 141.54883517176, 11.662582910068, 19.06353885545, 11.642263498676, 11.086603251245, 584.84959721319, 107.65195746959, 12.462684158326, 3479.612396473
  33.531496857591, 98.722869370776, 17.28002246098, 18.559519686788, 16.569319894819, 10.260748273623, 693.96037775527, 126.44160549276, 20.358214585901, 2968.6409842123
  24.434543349208, 95.438562115081, 10.254387719641, 18.286139769386, 10, 10, 324.64737841694, 93.447385984533, 21.702841242807, 2013.402213105
  27.406110093638, 125.17531005232, 14.260746398749, 19.383997430157, 10.804847241139, 10, 505.52302503224, 105.0213395384, 23.710201648428, 2209.6518398959
  20.902065326779, 80.737973694472, 10.336273579445, 17.817746840783, 10, 11.080432672905, 326.13777095276, 116.05860425879, 18.928277127678, 2382.2235964008
  28.225729707593, 108.49591490809, 15.50863586316, 19.469308000305, 15.39510009032, 10.024310677357, 580.50731642018, 124.64181792683, 19.202589975852, 2737.1170066746
  29.247358130887, 133.02721728332, 14.793503736397, 26.845901824864, 12.29857783672, 11.32216917832, 742.51677710483, 154.69447429482, 32.469796716487, 1721.7466162017
  14.718912284922, 82.401500407119, 15.427937166759, 11.32091569062, 10, 11.620107761107, 450.87122844995, 39.105219283988, 10.003882677009, 6328.857021226
  14.320431003475, 168.47629094979, 18.571855402404, 11.545103723682, 12.111052835416, 10.543388989429, 231.59870301219, 23.81658264475, 19.440365414525, 1029.5665823941


	More:
	
  13.362746757138, 57.058635226274, 15.934363610567, 10.143483670227, 31.906451182881, 12.228074861533, 276.21981191443, 55.406043646856, 13.107671358455, 1552.4225073248
  12.104085245789, 83.104216664998, 17.185574339696, 13.211210503962, 43.448754347944, 17.070965414232, 474.79048488884, 51.507023602854, 10, 1201.6243132132
L 13.80426797739, 70.609021427465, 12.588039192672, 12.491219019137, 45.587455774017, 18.195142686137, 394.66580085757, 62.716838275937, 12.344235547998, 1138.5325251954
  13.918474778603, 63.011376621138, 16.291674763388, 10.931062000706, 37.864735072859, 15.054199756635, 297.12221122153, 50.125515991801, 11.354557415467, 1527.0325456939
  14.566699031588, 87.168251976703, 18.309598288949, 10.114789165344, 41.372588844274, 14.277941890294, 581.77432672807, 51.332649816232, 10.330352229884, 1570.6393876307
  13.834695778098, 53.149726235128, 18.360163295629, 11.841122442154, 28.092410652961, 12.850230540289, 286.41909597714, 64.696964162704, 12.489615061433, 1714.1522239595
  14.388621520908, 65.589875049066, 20.103864408448, 11.546620981796, 30.067650213579, 11.640025747017, 280.65283046455, 59.69912729832, 12.66060223872, 1788.9165193751
  12.890365098367, 74.721056167152, 18.60307276289, 10, 37.715014058068, 16.50055953966, 606.77502306583, 44.33398432243, 10, 1797.4490017782
  15.561595752944, 66.128225257632, 21.463684971468, 11.18921316228, 28.244777976881, 12.832245363735, 292.70383103266, 57.748772814426, 10.613349343066, 1564.9247120314
  12.826365573142, 81.166780748109, 14.318592639895, 11.873825106528, 43.75652349143, 16.574558719252, 415.95364453791, 62.352362272406, 12.001420840125, 1113.4824853484
  30.204291416087, 50.032450326587, 17.194259145995, 10, 38.588017069872, 19.29627663621, 243.33639166927, 71.621672566737, 10, 1522.7862839189
  14.021876820683, 76.588705310373, 16.368634498117, 11.8865572434, 40.1193298976, 15.373731557352, 452.80680402848, 59.247775787732, 11.263060159654, 1547.68555154
  11.41667510226, 54.098670132866, 15.654519280355, 12.586805871593, 33.684284892317, 15.382519567525, 277.59808851634, 52.354380092782, 11.988041081155, 1801.5851485409
W 28.60450533943, 62.975244008134, 17.260237580088, 10, 40.702127999788, 17.366868011302, 265.8537223484, 59.66401886978, 10.804732659367, 1507.5484133699
  16.048236008138, 101.57990344276, 12.948771583422, 10, 40.97175957298, 21.020077542318, 294.7548948995, 62.995646587389, 14.908927808246, 2146.549412222
  30.104041075213, 69.351367605176, 18.832731192267, 10.721692007518, 41.156841539277, 17.208184240935, 231.72175339655, 49.885774047238, 10, 1365.8396296618
  11.42763265145, 50.947902586112, 16.542260189864, 12.265245442011, 34.099066148536, 17.881815440676, 278.85102349472, 55.983321884994, 12.528912791643, 1675.5403191016
  19.126919129351, 88.32123147405, 10.310923406865, 11.617164105386, 33.672720662074, 14.026925576979, 322.7642596815, 51.784101644408, 14.504996090698, 2045.7275852837
  13.99760140104, 146.59581712767, 11.618947671397, 15.260768562657, 32.518638102857, 10.382306093153, 484.66435368068, 55.398545746677, 14.84953195515, 1794.1721077563
  16.400403418392, 103.11927830942, 13.71666842041, 10.610631295403, 38.116795642579, 16.350869535253, 282.45023213744, 34.09569642039, 12.996965561907, 2247.0244895473

  Result of final run:
    11.240912287562, 63.838430680428, 27.973864317562, 10, 13.23295795019, 19.068523502003, 775.95240162512, 12.0662604415, 14.371411663416, 3946.936042193
W 11.669760792464, 65.211882310176, 32.290687050622, 10.604559130178, 11.439901155733, 16.642595625072, 743.15267522941, 14.339423272783, 14.658758277412, 3359.4243233387
  10.907287575527, 61.155695926917, 26.27163448023, 10, 11.096703221524, 16.049883926664, 798.56784283347, 11.459492529182, 13.53121222295, 3705.3498692417
  10.13036178522, 64.030303918811, 31.114889876604, 11.305232738671, 12.010935196144, 17.120493708463, 745.79744026744, 16.474448973898, 14.885162279209, 3386.1218362392
  10, 71.658627233744, 28.620681142279, 10, 14.177664120749, 21.914670563187, 774.20412201054, 10, 13.002181123628, 5396.9393438593
L 10.818412219332, 74.767256738069, 25.621062157227, 10, 15.253359583045, 20.7124858636, 770.15890829461, 11.456779827061, 15.814539060842, 4721.8466025065
  10.421183222524, 57.673001281473, 29.542457242768, 10.349624232472, 11.737219390776, 14.235307408671, 532.85617303349, 10.457617011764, 14.78251913206, 3329.5018502121
  11.157039486576, 82.056091938054, 25.152920459764, 11.481985115228, 10, 15.549317255383, 739.82245489989, 13.297986835748, 13.02305346111, 2575.0885615
  10.059513431667, 90.081495871337, 26.250594050188, 11.040688007643, 15.119403362212, 14.18716062029, 523.67892875345, 14.234785145942, 13.992289166713, 3432.558802096
  10, 79.263734518061, 31.195228907279, 10, 18.821604395865, 14.29760211121, 481.01971897382, 14.046146486781, 15.296729144294, 3070.3098630644
  12.621445461162, 64.492869892468, 10, 14.768608199285, 22.094097043509, 16.300048976673, 610.746992782, 17.758526014656, 10, 2891.3472889479
  10, 52.960416299729, 10.426486675889, 14.449491774307, 10.635966037978, 11.797629944731, 738.29009485552, 12.01188854153, 11.285951845986, 3072.9509744088
  11.018402477069, 56.861551034976, 26.628081471454, 10.478653954136, 12.53880047314, 16.307798515249, 632.87568925705, 12.762798022127, 15.186825175019, 3392.9330367904
  11.197917131552, 67.049421531946, 31.560404180594, 11.515551395196, 10.550223075278, 16.052613715079, 910.3928184394, 12.728605255703, 16.511362833455, 3454.7486285921
  10, 64.793349302152, 12.041062563401, 15.87880632494, 23.770330416069, 12.901424253676, 493.59189238386, 16.565078173867, 13.341120992609, 2585.2676014548
  10, 68.900757833838, 34.131567534062, 10.018139081549, 11.779881346391, 14.407934483047, 935.99046149495, 16.088861627758, 14.373993727322, 2471.9310043685
  11.441192085689, 59.976956988107, 28.210755469705, 10, 13.826400762829, 21.41414924344, 677.6182688834, 11.44211066747, 13.759623056517, 3669.3828755453
  11.95809839696, 97.905606979557, 26.726862518816, 10.89574329593, 10, 11.771821790138, 743.92435761451, 15.350716352777, 13.841343185276, 3185.2662453423
  13.269373707977, 58.249565656377, 10, 13.455678012255, 20.043287602487, 13.514117910621, 512.31742009226, 17.118163461905, 10, 2457.2576929933
  12.080459292816, 131.10360975227, 12.415007743499, 16.28088504057, 18.38169332712, 10, 209.92198285194, 31.620424191344, 15.817729089007, 2478.070406464
3359 14  14  743 743 14  14  3359
14  16  11  10  10  11  16  14
14  11  32  65  65  32  11  14
743 10  65  11  11  65  10  743
743 10  65  11  11  65  10  743
14  11  32  65  65  32  11  14
14  16  11  10  10  11  16  14
3359 14  14  743 743 14  14  3359
*/

if (!exists(@::modules.stdlib)) run('stdlib.pika');

INIT_STATE = '...........................OX......XO...........................;X;0';
// INIT_STATE = '.XXXXXXX..XOOOXX.OOOOXXXOOOOXOOO..OOOOOO...OO.OO....OOOO....O.X.;X;14';

map(@OPPOSITE_COLORS, 'X','O' , 'O','X');
map(@COLOR_SCORES, 'X',1 , 'O',-1 , '.',0);

onBoard = function /* (x, y) */ { (0 <= $0 && $0 < 8 && 0 <= $1 && $1 < 8) };
isPiece = function /* (piece) */ { ($0 !== '.') };
getTurnColor = function /* (state) */ { $0{65} };
getSquare = function /* (state, x, y) */ { $0{$2 * 8 + $1} };
// getScore = function /* (state) */ { if (getTurnColor($0) === 'O') -$0{67:} else $0{67:} };
getScore = function /* (state) */ { s = 0; i = 0; for (y = 0; y < 8; ++y) for (x = 0; x < 8; ++x) { s += SQUARE_SCORES[y][x] * COLOR_SCORES[$0{i}]; ++i; }; if (getTurnColor($0) === 'O') -s else s };
squareScore = function /* (x:$0, y:$1, color:$2) */ { /*SQUARE_SCORES[$0][$1] **/ COLOR_SCORES[$2] };
setSquare = function /* (state:$0, x:$1, y:$2) */ {
	i = $2 * 8 + $1;
	$0{:i} # $0{65} # $0{i + 1:65 - i - 1} # $0{65} # ';' # ($0{67:} - squareScore($1, $2, $0{i}) + squareScore($1, $2, $0{65}));
};
flipTurnColor = function /* (state:$0) */ { $0{:65} # OPPOSITE_COLORS[getTurnColor($0)] # $0{66:}; };

display = function /* (state) */ {
	print("\n" # getTurnColor($0) # "'s turn (score: " # getScore($0) # ")\n");
	for (y = 7; y >= 0; --y) {
		s = (y + 1) # ' | ';
		for (x = 0; x < 8; ++x) s #= $0{y * 8 + x} # ' ';
		print(s);
	};
	print("  +----------------\n    A B C D E F G H\n");
};

flip = function /* (state:$0, x:$1, y:$2, dx:$3, dy:$4) */ {
	original = $0;
	for ({ fc = OPPOSITE_COLORS[getTurnColor($0)]; c = void; }
			; { $1 += $3; $2 += $4; (0 <= $1 && $1 < 8 && 0 <= $2 && $2 < 8) && (c = $0{$2 * 8 + $1}) == fc }
			; $0 = setSquare($0, $1, $2));
	if (c != getTurnColor($0)) original else $0
};

place = function /* (state:$0, x:$1, y:$2) */ {
	if (getSquare($0, $1, $2) == '.') {
		original = $0;
		$0 = flip($0, $1, $2,  1,  0);
		$0 = flip($0, $1, $2,  1,  1);
		$0 = flip($0, $1, $2,  0,  1);
		$0 = flip($0, $1, $2, -1,  1);
		$0 = flip($0, $1, $2, -1,  0);
		$0 = flip($0, $1, $2, -1, -1);
		$0 = flip($0, $1, $2,  0, -1);
		$0 = flip($0, $1, $2,  1, -1);
		if ($0 != original) $0 = flipTurnColor(setSquare($0, $1, $2));
	};
	( $0 )
};

tryAll = function /* (state:$0, exec:$1) */ {
	for ({gotMove = false; i = 0}; i < 64
			&& ((newState = place($0, i % 8, i \ 8)) == $0 || { gotMove = true; $1(newState) }); ++i);
	if (!gotMove) $1(flipTurnColor($0));
	( gotMove )
};

alphaBeta = function /* (state:$0, depth:$1, alpha:$2, beta:$3) */ {
	if ($1 == 0) getScore($0)
	else {
		depth = $1; alpha = $2; beta = $3;
		tryAll($0, >{ alpha = max(alpha, -alphaBeta($0, depth - 1, -beta, -alpha)); (alpha < beta) });
		alpha
	}
};

			uniformRandom.NORM = 1 / ~0;
			uniformRandom.seed = 2463534242;
	uniformRandom.seed += 1234123;
			uniformRandom = function {
				y = uniformRandom.seed;
				y ^= y << 13;
				y ^= y >> 17;
				( (::uniformRandom.seed = y ^ (y << 5)) * uniformRandom.NORM )
			};

			normalRandom.next = void;
			normalRandom = function {
				if ((z0 = normalRandom.next) !== void) ::normalRandom.next = void
				else {
					r = sqrt(-2 * log(uniformRandom()));
					p = 2 * PI * uniformRandom();
					z0 = r * cos(p);
					::normalRandom.next = r * sin(p);
				};
				( z0 )
			};

reversiHelp = function {
	print("\nEnter moves like this: D2.\nType 'exit' to quit.\nType 'restart' to restart.\n"
			# "Type 'play' to have the computer play your color instead.\nType 'undo' to take back last move.\n");
};

init => { state = INIT_STATE; history.n = 0; /*display(state)*/ };
			revenge = false;
			
			POOL_SIZE = 20;
			if (!exists(@::BEST_SCORES[0][0])) {
				for (i = 0; i < POOL_SIZE; ++i) {
					compose(@::BEST_SCORES[i], 20.669199085685, 87.119252266189, 13.849098891267, 10, 29.465373504617, 14.05756682934, 281.87578087657, 32.231767027128, 10, 2007.160654384);
					if (i != 0) {
						for	(j = 0; j < 10; ++j) ::BEST_SCORES[i][j] = max(::BEST_SCORES[i][j] + normalRandom() * (::BEST_SCORES[i][j] * 0.1), 10);
					};
				};

				n = 9;
				for (y = 0; y < 4; ++y) for (x = y; x < 4; ++x) {
					SQUARES_MAP[y][x]
					= SQUARES_MAP[y][7 - x]
					= SQUARES_MAP[7 - y][x]
					= SQUARES_MAP[7 - y][7 - x]
					= SQUARES_MAP[x][y]
					= SQUARES_MAP[x][7 - y]
					= SQUARES_MAP[7 - x][y]
					= SQUARES_MAP[7 - x][7 - y] = n;
					--n;
				};
				for (y = 0; y < 8; ++y) for (x = 0; x < 8; ++x) SQUARE_SCORES[y][x] = BEST_SCORES[0][SQUARES_MAP[y][x]];
			};
			for(;true;) {
init();
			if (revenge) {
				swap(@selectionX, @selectionO);
			} else {
				for (;
					{ selectionX = min(floor(random(1) * random(POOL_SIZE)), POOL_SIZE - 1);
					selectionO = min(floor(random(1) * random(POOL_SIZE)), POOL_SIZE - 1);
					selectionX == selectionO }; );
			};
			
			clone(@::BEST_SCORES[selectionX], @::SCORES_X);
			clone(@::BEST_SCORES[selectionO], @::SCORES_O);

for (continue = true; {
	history[history.n] = state;
	ok = false;
	userHadMoves = tryAll(state, >true);
	if (!userHadMoves) {
		print('No valid move for you.');
		state = flipTurnColor(state);
		ok = true;
	} else {
ok = true;/*
		s = replace(upper(input("> ")), "-", "");
		if (s === "EXIT") continue = false
		else if (s === "UNDO") { if (history.n > 0) state = history[--history.n]; display(state) }
		else if (s === "RESTART") init()
		else {
			if (s === "PLAY") ok = true
			else if (length(s) != 2) reversiHelp()
			else {
				x = ordinal(s{0}) - ordinal('A');
				y = ordinal(s{1}) - ordinal('1');
				if (!onBoard(x, y)) reversiHelp()
				else {
					newState = place(state, x, y);
					if (newState == state) print(s{0:2} # " is not a legal move")
					else {
						state = newState;
						ok = true;
					}
				};
print(state);
			};
		}*/
	};
	if (ok) {
//		display(state);
		history.n++;
		maxi = -infinity;
//		print('Thinking...');

				if (getTurnColor(state) == 'X') { for (y = 0; y < 8; ++y) for (x = 0; x < 8; ++x) SQUARE_SCORES[y][x] = SCORES_X[SQUARES_MAP[y][x]]; }
				else { for (y = 0; y < 8; ++y) for (x = 0; x < 8; ++x) SQUARE_SCORES[y][x] = SCORES_O[SQUARES_MAP[y][x]]; };
				
		computerHadMoves = tryAll(state, >{
			score = -alphaBeta($0, 3, -infinity, -maxi);
			// display($0);
			// print('   score: ' # score);
			if (score > maxi) { maxi = score; state = $0 };
			true
		});
		if (!computerHadMoves) print('No valid move for me.');
//		display(state);
		if (!userHadMoves && !computerHadMoves) {
			print("Game over!");
//			init();
				display(state);
				continue = false;

				if (!revenge) {
					revenge = true;
					winner = (if (state{67:} < 0) selectionO else selectionX);
					loser = (if (state{67:} < 0) selectionX else selectionO);
				} else {
					revenge = false;
					newWinner = (if (state{67:} < 0) selectionO else selectionX);
					newLoser = (if (state{67:} < 0) selectionX else selectionO);
					for (j = 0; j < POOL_SIZE; ++j) {
						s = (if (j == newLoser) 'L ' else if (j == newWinner) 'W ' else '  '); for (i = 0; i < 10; ++i) s #= (if (i != 0) ', ') # BEST_SCORES[j][i]; print(s);
					};
					for (y = 0; y < 8; ++y) for (x = 0; x < 8; ++x) SQUARE_SCORES[y][x] = floor(BEST_SCORES[newWinner][SQUARES_MAP[y][x]]);
					for (y = 0; y < 8; ++y) { for ({x = 0; s = ""}; x < 8; ++x) s #= SQUARE_SCORES[y][x] # ' ' # repeat(' ', 3 - length(SQUARE_SCORES[y][x])); print(s); };
					if (newWinner == winner) {
						print('Clear winner!');
						assert(>newLoser == loser);
						winner = newWinner;
						loser = newLoser;
						for (i = 0; i < 10; ++i) ::BEST_SCORES[loser][i] = max(::BEST_SCORES[winner][i] + normalRandom() * (::BEST_SCORES[winner][i] * 0.1), 10);
					};
				};
								
				
				/*
				display(state);
				clone(@(if (state{67:} < 0) ::SCORES_O else ::SCORES_X), @::BEST_SCORES);
				continue = false;
				for (y = 0; y < 8; ++y) for (x = 0; x < 8; ++x) SQUARE_SCORES[y][x] = floor(BEST_SCORES[SQUARES_MAP[y][x]]);
				for (y = 0; y < 8; ++y) { for ({x = 0; s = ""}; x < 8; ++x) s #= SQUARE_SCORES[y][x] # ' ' # repeat(' ', 3 - length(SQUARE_SCORES[y][x])); print(s); };
				s = ''; for (i = 0; i < 10; ++i) s #= (if (s != '') ', ') # BEST_SCORES[i]; print(s);
				*/
		};
	};
	( continue )
}; ) ;
}
