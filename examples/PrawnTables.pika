include('examples/toC.pika');

s = TAB;
for ({ lo = 0; i = 0; lu = 0; }; i < 256; i++) {
	o = (if (i >= 0x10) i * i * i >> 8 else i);
	for ({prec = 1; d = o - lo}; prec * 2 < d; prec *= 2);
	u = (o) & ~(prec - 1);
	h = radix(u, 16);
	d2 = u - lu;
	lu = u;
	 print(radix(i,16) # ':' # radix(o,16) # ':' # radix(o - lo, 16) # ':' # prec # ':' # h # ':' # radix(d2, 16));
	s #= '0x' # h # ', ';
	if ((i & 15) == 15) s #= LF # TAB;
	lo = o;
	a[i] = o;
};
print(s);

/*
s = TAB;
for ({ lo = 0; i = 0 }; i < 256; i++) {
	o = i * i;
	for ({prec = 1; d = o - lo}; prec * 2 < d; prec *= 2);
	h = radix(o & ~(prec - 1), 16);
	// print(radix(i,16) # ':' # radix(o,16) # ':' # radix(o - lo, 16) # ':' # prec # ':' # h);
	s #= '0x' # h # ', ';
	if ((i & 15) == 15) s #= LF # TAB;
	lo = o;
	a[i] = o;
};
print(s);
*/

{
	s = TAB;
    y = 0;
    z = 1;
    a.n = 256;
	f = function { $0 * $0 };
    for (i = 0; i < 256; ++i) {
		print(radix(i, 16) # ':' # radix(f(i), 16) # ':' # radix(y, 16));
		s #= '0x' # radix(y, 16) # ', ';
		if ((i & 15) == 15) s #= LF # TAB;
		if ((y & (z + z - 1)) == 0) {
			y2 = y;
			for (j = i; j < 256 && y2 <= f(j); ++j) y2 += z + z;
			if (j >= 256) z += z;
		};
        y += z;
	};
	print(s);
};

{
	s = TAB;
    y = 0;
    z = 1;
    a.n = 256;
	f = function { y = $0 / 255.0; from = 1.0 / 0x4000; to = 0xFFFF; y = y * from * pow(1/from, y); min(round(to * y), 65535) };
    for (i = 0; i < 256; ++i) {
		print(radix(i, 16) # ':' # radix(f(i), 16) # ':' # radix(y, 16));
		s #= '0x' # radix(y, 16) # ', ';
		if ((i & 15) == 15) s #= LF # TAB;
		if ((y & (z + z - 1)) == 0) {
			y2 = y;
			lookAhead = 10;
			for (j = i; j < i + lookAhead && j < 256 && y2 <= f(j); ++j) y2 += z + z;
			if (j >= i + lookAhead || j >= 256) z += z;
		};
        y += z;
	};
	print(s);
};


{
	s = TAB;
    y = 0;
    z = 1;
    a.n = 256;
	compose(@steps, 1, 1, 1, 1, 2, 2, 4, 4, 0x10, 0x20, 0x40, 0x80, 0x100, 0x200, 0x400, 0x800);
	for (i = 0; i < 256; ++i) {
		print(radix(i, 16) # ':' # radix(f(i), 16) # ':' # radix(y, 16));
		s #= '0x' # radix(y, 16) # ', ';
		if ((i & 15) == 15) s #= LF # TAB;
		a[i] = y;
        y += steps[i >> 4];
	};
	print(s);
};

{
	s = TAB;
    y = 0;
    z = 1;
    a.n = 128;
//	compose(@steps, 1, 1, 2, 4, 8, 0x10, 0x20, 0x400);
	compose(@steps, 1, 2, 0x10, 0x20, 0x40, 0x80, 0x100, 0x200);
	for (i = 0; i < 128; ++i) {
		print(radix(i, 16) # ':' # radix(f(i), 16) # ':' # radix(y, 16));
		s #= '0x' # radix(y, 16) # ', ';
		if ((i & 15) == 15) s #= LF # TAB;
		a[i] = y;
        y += steps[i >> 4];
	};
	print(s);
};

OVERSAMPLE = 3;
DOWNSAMPLE_FIR_SIZE = OVERSAMPLE * 4;

Sinc = function { if ($0 == 0.0) 1.0 else sin($0) / $0 };

downsampleTaps.n = DOWNSAMPLE_FIR_SIZE;
st = 0.0;
for (i = 0; i < DOWNSAMPLE_FIR_SIZE; ++i) {
	t = Sinc(PI * (i + 0.5 - DOWNSAMPLE_FIR_SIZE * 0.5) * (1.0 / OVERSAMPLE));
	downsampleTaps[i] = t;
	st += t;
};
iterate(@downsampleTaps, >[$0] /= st);

print(numberArrayToC(@downsampleTaps));
