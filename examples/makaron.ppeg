root            <- 									{ $$ = ''; $$.ctx = @ctx; }
					macroDef+
					(
                    '@@'							{ $$ #= '@' }
                    / eol macroDef+
                    / '(@' macroUse ')'
                    / '@' macroUse
                    / !'@' c=.						{ $$ #= $c }
                    )*
                    eof

macroDef		<-	(hs* 
						'@define'					{ $redef = false }
						/ '@redefine'				{ $redef = true }
					) hs+
					id:identifier params:parameters?
					( (hs* &eol t:multiline)
					/ (hs* t:singleline hs* eol) )	{
														if (!$redef && exists(@[$$.ctx].defs[$id])) {
															throw($id + " already defined");
														} else {
															prune(@[$$.ctx].defs[$id]);
														};
														clone(@$params, @[$$.ctx].defs[$id].params);
														[$$.ctx].defs[$id].text = $t;
													}

singleline		<-	$$=(!(hs* eol) .)+

multiline		<-	$$=(!multilineEnd .)* multilineEnd

multilineEnd	<-	eol hs* '@end' hs* eol

macroUse		<-	id:identifier arguments?		{ print('call macro: ' # $id) }

arguments		<- 	'(' a:argument					{ print('arg: ' # $a); }
					(',' a:argument					{ print('arg: ' # $a); }
					)* ')'

parameters		<-									{ $$.n = 0 }
					'(' ws* p:identifier			{ append(@$$, $p) }
					(ws* ',' ws* p:identifier		{ append(@$$, $p) }
					)*
					ws* ')'

identifier		<-	!'define' !'redefine' $$=([a-zA-Z_] [a-zA-Z0-9_]*)

argument		<-	ws $$=('"' ( !'"' '\\"' . )* '"') ws
					/ $$=(![,)] .)*

hs		        <-  ([ \t])+

ws              <-  ([ \t\r\n])+

eol             <-  "\r\n" / "\n" / "\r" / !.

eof             <-  !.
