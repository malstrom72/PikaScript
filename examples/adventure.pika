
set(@IGNORES, '', 'the');
map(@ACTION_SWITCH
	, 'GTO', >{ loc = @places[$0]; }
	, 'SAY', >{ print($0); }
	, 'ALT', >{ s = [loc].actions[$0]; ACTION_SWITCH[s{:3}](s{4:}); }
);

preProcessInput = function {
	s = lower($0);
	x = '';
	tokenize(s, >if (!exists(@IGNORES[$0])) x #= $0 # ' ', WS);
	( chop(x, 1) )
};

parseAction = function {
	args(@s);

	action = '';

	//
	// go [to]
	//
	if (wildmatch(s, "go[ ]?*to[ ]?*{[^ ]?[]*}", @goToPlaceName) || wildmatch(s, "go[ ]?*{[^ ]?[]*}", @goToPlaceName)) {
		matches.n = 0;
		l = length(goToPlaceName);
		iterate(@places, >if ([$0].name{:l} == goToPlaceName) append(@matches, $1));
		if (matches.n == 0) {
			answer = input("No such place exists. Create a new place with that name (no)? ");
			if (lower(answer{0}) != 'y') {
				print("Never mind then. Back to the game.")
			} else {
				action = 'GTO:' # places.n;
				places[places.n].name = goToPlaceName;
				loc = @places[places.n];
				++places.n;
			}
		} else if (matches.n == 1) {
			if (places[matches[0]].name != goToPlaceName) {
				answer = input('Do you mean "' # places[matches[0]].name # '" (yes)? ');
				if (lower(answer{0}) == 'n') {
					print("Never mind then. Back to the game.")
				} else {
					action = 'GTO:' # matches[0];
					loc = @places[matches[0]];
				}
			} else {
				action = 'GTO:' # matches[0];
				loc = @places[matches[0]];
			}
		} else {
			print(matches.n # " places that matches that name exists. Please select one of the following (or press enter to cancel):");
			iterate(@matches, >{
				print(($1 + 1) # '. ' # places[$2].name # (if (exists(@places[$2].description)) (' : ' # replace(places[$2].description{:40}, "\n\r\t", " "))));
			});
			answer = input("num> ");
			if (answer == '') {
				print("Never mind then. Back to the game.")
			} else if (classify(answer) == 'number' && number >= 1 && number <= matches.n) {
				action = 'GTO:' # matches[number - 1];
				loc = @places[matches[number - 1]];
			} else {
				print("Invalid number. Never mind then. Back to the game.");
			}
		}
	}

	//
	// say
	//
	else if (wildmatch(s, "say[ ]?*{[^ ]?[]*}", @sayString)) {
		action = "SAY:" # sayString;
	}

	//
	// if
	//
	else if ({ ifNot = false; wildmatch(s, "if[ ]?*{[^ ]?[]*}[ ]?*is[ ]?*{[^ ]?[]*}[ ]?*then[ ]?*{[^ ]?[]*}", @ifVar, @ifValue, @ifThen) }
			|| { ifNot = wildmatch(s, "if[ ]?*{[^ ]?[]*}[ ]?*is[ ]?*not[ ]?*{[^ ]?[]*}[ ]?*then[ ]?*{[^ ]?[]*}", @ifVar, @ifValue, @ifThen) }) {
		action = (if (ifNot) "IFN:" else "IFE:") # ifVar # '=' # ifValue # ':';
	}

	//
	// same [as]
	//
	else if (wildmatch(s, "same[ ]?*as[ ]?*{[^ ]?[]*}", @alternativeOf) || wildmatch(s, "same[ ]?*{[^ ]?[]*}", @alternativeOf)) {
		alternativeOf = preProcessInput(alternativeOf);
		if (!exists(r = @[loc].actions[alternativeOf])) {
			print("No action is defined for that user input. Back to the game.");
		} else {
			if ([r]{:3} === "ALT") {
				alternativeOf = [r]{4:};
			};
			action = "ALT:" # alternativeOf;
		};
	}

	else {
		print("I didn't understand that command, never mind then. Back to the game.");
	}

	( action )
};

if (!exists(@places.n)) {
	places.n = 1;
	places[0].name = 'entry';
};

loc = @places[0];
lastLoc = loc;

for (doExit = false; !doExit ;) {
	for (; {
		print(LF # upper([loc].name{0}) # [loc].name{1:});
		print(repeat('-', length([loc].name)));
		( !exists(@[loc].description) )
	};) {
		answer = input("I don't know anything about this location yet. Do you wish to describe it (no)? ");
		if (lower(answer{0}) != 'y') loc = lastLoc
		else [loc].description = input("desc> ");
	};
	print([loc].description);
	lastLoc = loc;
	s = input("> ");
	x = preProcessInput(s);
	if (x == 'quit') {
		doExit = true
	} else {
		if (exists(p = @[loc].actions[x])) {
			ACTION_SWITCH[[p]{:3}]([p]{4:})
		} else {
			print('I don''t know the response to "' # x # '". Please tell me what should happen.');
			print("Available commands are:");
			print('  go [to] ["]<place name>["]');
			print('  say ["]<text>["]');
			print("  set <variable> to <value>");
			print("  if <variable> is [not] <value> then <command>");
			print('  same [as] ["]<written text>["]');
			s = input("cmd> ");
			action = parseAction(s);
			if (action != void) {
				[p] = action;
			};
		}
	}
}
