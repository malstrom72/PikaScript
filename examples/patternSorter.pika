px = 1234;
py = 5678;

rnd = function {
	t = px ^ (px << 10);
	::px = py;
	::py = py ^ (py >> 13) ^ t ^ (t >> 10);

	i = py \ 1;
	( abs(i * 4.6566128730774e-10) );
};

/*

probs:

compose(@PROBS, 5, 1, 2, 1, 3, 1, 2, 1, 4, 1, 2, 1, 3, 1, 2, 1);

a.n = 0;
for (i = 0; i < PROBS.n; ++i) {
	for (j = 0; j < PROBS[i]; ++j) {
		append(@a, i);
	}
};
print(numberArrayToC(@a));
*/

/*
len = 16;
pulses = 5;

cnt = len;
pattern = 0;
for (i = 0; i < len; ++i) {
	pattern <<= 1;
	if (cnt >= len) {
		pattern |= 1;
		cnt -= len;
	};
	cnt += pulses;
};

print(radix(pattern, 2));
*/

len = 13;
pulses = 5;
/*
 divisor = len - pulses;
 remainder[0] = pulses;
 level = 0;
 cycleLength = 1;
 remLength = 1;
 for (; {
 	count[level] = divisor \ remainder[level];
 	remainder[level + 1] = divisor % remainder[level];
 	divisor = remainder[level];
 	newLength = (cycleLength * count[level]) + remLength;
 	remLength = cycleLength;
 	cycleLength = newLength;
 	++level;
 	( remainder[level] > 1 )
 }; );
 count[level] = divisor;
 if (remainder[level] > 0) cycleLength = (cycleLength * count[level]) + remLength;

*/
/*
num_slots = len;
num_pulses = pulses;
divisor = num_slots - num_pulses;
 remainder[0] = num_pulses;
 level = 0;
 for(;{
 	count[level] = divisor \ remainder[level];
 	remainder[level+1] = divisor % remainder[level];
 	divisor = remainder[level];
 	level = level + 1;
 	 (remainder[level] > 1);
};);
 count[level] = divisor;


s = '';
build_string = function {
	level = $0;
	if (level == -1)
	 	::s = s # '0'
	 else if (level == -2)
	 	::s = s # '1'
	 else {
		 for (i=0; i < count[level]; i++) build_string (level-1);
		 if (remainder[level] != 0) build_string (level-2);
	 }
};

build_string(level);
print(s);
*/



/*
PERMUTATIONS

ptns.n = 0;
f = function {
	args(@prefix, @divIndex, @divCount);
	count = floor(16 / divCount * (divIndex + 1)) - floor(16 / divCount * divIndex);
	for (pos = 0; pos < count; ++pos) {
		s = prefix # repeat('0', pos) # '1' # repeat('0', count - pos - 1);
		if (divIndex < divCount - 1) f(s, divIndex + 1, divCount)
		else append(@::ptns, s);
	};
};
fromBinary = function {
	v = 0;
	for (i = 0; i < 16; ++i) {
		v <<= 1;
		if ($0{i} !== '0') v |= 1;
	};
	( v )
};
for (i = 1; i <= 16; ++i) f('', 0, i);
a.n = 256;
for (i = 0; i < 256; ++i) a[i] = fromBinary(ptns[floor(i * (1930/255))]);
print(numberArrayToC(@a, , , 16));
*/

/*

1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0
10 10 10 10 10 10 10 1 1

101 101 10 10 10 10 10

10110 10110 10 10 10

1011010 1011010 10

1011010101011010

*/


fromBinary = function {
	v = 0;
	for (i = 0; i < length($0); ++i) {
		v <<= 1;
		if ($0{i} !== '0') v |= 1;
	};
	( v )
};

e = function {
	ln = $0;
	rn = $1 - $0;
	l = '1';
	r = '0';

	for (; rn > 1; ) {
		s = l;
		l #= r;
		if (rn > ln) {
			rn -= ln;
		} else {
			r = s;
			n = rn;
			rn = ln - rn;
			ln = n;
		};
	};

	( repeat(l, ln) # repeat(r, rn) )
};

a.n = 16;
for (i = 1; i <= 16; ++i) {
	s = e(i, 16);
	a[i - 1] = fromBinary(s);
};

print(numberArrayToC(@a, , , 16));
