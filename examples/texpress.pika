// tex`press
// FIX : some bug with escaping ` prevents this source from being compressed / decompressed

::texCompress = function {
	vargs(@in, , @repeater);
	defaults(@repeater, '`');
	out = '';
	for (i = 0; i < length(in);) {
		if (in{i + 1} !== repeater && (f = rsearch(in{0:i - 4}, in{i:2})) >= 0
				&& (for (m = mismatch(in{f:i + 2 - f}, in{i:}); m >= (4 + 2) && in{i + m - 2} === repeater;) --m) >= (4 + 2)) {
			out #= in{i:2} # repeater;
			i += 4 + search(in{f + 4:}, in{i + m - 2:2});
		} else if (in{i} === repeater) {
			out #= repeater # repeater;
			++i;
		} else {
			out #= in{i};
			++i;
		}
	};
	assert(>texDecompress(out) === in);
	out
};

::texCompress2 = function {
	vargs(@in, , @rep);
	defaults(@rep, '`');
	inl = length(in);
	out = in{:6};
	for (i = 6; i < inl;) {
		p = @map[in{i:2}];
		if (exists(p) && in{i + 1} !== rep
				&& (for (m = mismatch(in{[p]:i + 2 - [p]}, in{i:}); m >= 6 && in{i + m - 2} === rep;) --m) >= 6) {
			out #= in{i:2} # rep;
			for (n = 4 + search(in{[p] + 4:}, in{i + m - 2:2}); n > 0; --n) {
				++i;
				map[in{i - 6:2}] = i - 6;
			}
		} else {
			if (in{i} === rep) out #= rep;
			out #= in{i};
			++i;
			map[in{i - 6:2}] = i - 6;
		}
	};
	assert(>texDecompress(out) === in);
	out
};

::texCompress3 = function {
	vargs(@in, , @rep);
	defaults(@rep, '`');
	inl = length(in);
	inr = reverse(in);
	out = in{:6};
	for (i = 6; i < inl;) {
		if (in{i + 1} !== rep && (f = i - 6 - search(inr{inl - i + 4:}, reverse(in{i:2}))) >= 0
				&& (for (m = mismatch(in{f:i + 2 - f}, in{i:}); m >= 6 && in{i + m - 2} === rep;) --m) >= 6) {
			out #= in{i:2} # rep;
			i += 4 + search(in{f + 4:}, in{i + m - 2:2});
		} else {
			if (in{i} === rep) out #= rep;
			out #= in{i};
			++i;
		}
	};
	assert(>texDecompress(out) === in);
	out
};

::texDecompress = function {
	vargs(@in, , @repeater);
	defaults(@repeater, '`');
	out = '';
	for (i = 0; i < length(in);) {
		if (in{i:2} === repeater # repeater) {
			out #= repeater;
			i += 2;
		} else if (in{i} === repeater && (f = rsearch(chop(out, 2 + 4), right(out, 2))) >= 0) {
			m = search(out{f + 4:}, in{i + 1:2});
			out #= out{f + 2:m + 4 - 2};
			++i;
		} else {
			out #= in{i};
			++i;
		}
	};
	out
};

::nexCompress = function {
	vargs(@in, , @repeater);
	defaults(@repeater, '`');
	code = '';
	for (i = 32; i < 127; ++i) if (i != ordinal(repeater)) code #= char(i);
	assert(>length(code) == 94);
	assert(>pow(94, 2) == 8836);
	out = '';
isrep = false;
	for (i = 0; i < length(in);) {
		b = max(i - 8836, 0);
		o = -1;
		for (l = 4; l < 93 + 5 && i < length(in) - l && (f = search(in{b:i + l - b}, in{i:l + 1})) < (i + l - b);) {
			o = b + f;
			l = min(mismatch(in{o:}, in{i:}), 93 + 5);
		};
		if (o >= 0) {
			d = i - o;
			// print('d:' # d # ' l:' # l);
			--d;
			assert(>0 <= d && d < 8836);
			assert(>0 <= l - 5 && l - 5 < 94);
			i += l;
		if (!isrep) out #= repeater;
		isrep = true;
			n = floor(d / 94);
			assert(>code{n} !== void);
			assert(>code{d - n * 94} !== void);
			assert(>code{l - 5} !== void);
			out #= code{n} # code{d - n * 94} # code{l - 5};
		} else {
		if (isrep) out #= repeater;
		isrep = false;
			if (in{i} === repeater) out #= repeater;
			out #= in{i};
			++i;
		}
	};
// print('---');
	assert(>nexDecompress(out) === in);
	out
};

::nexDecompress = function {
	repo = ordinal(rep = coalesce(@$1, '`'));
	decode => $0 - (if ($0 > repo) 33 else 32);
	out = '';
	for (in = $0; in !== void; in = in{1:}) {
		out #= in{:n = find(in, rep)};
		if ((in = in{n + 1:}){0} === rep) out #= rep
		else for (; in !== void && in{0} !== rep; in = in{3:}) {
			d = decode(ordinal(in{0})) * 94 + decode(ordinal(in{1})) + 1;
			for (l = decode(ordinal(in{2})) + 5; l > 0; l -= length(a)) out #= (a = out{length(out) - d:l});
		}
	};
	out
};


