include('systools.pika');
include('stdlib.pika');
include(run.root # '../tools/ppeg/ppeg.pika');

EXAMPLES_ROOT = run.root # '../examples/';
PPEG_ROOT = run.root # '../tools/ppeg/';
digitsFile = EXAMPLES_ROOT # 'digits.ppeg';

testDigits = function {
        success = ppeg.compileFunction(src=load(digitsFile), @parseDigits);
        if (!success) throw('compile failed');
        assert(> parseDigits('12345'));
        assert(> !parseDigits('12a45'));
};

testDigits();

// self-compile the PPEG compiler
oldSource = newSource = load(PPEG_ROOT # 'ppegGlobal.ppeg');
construct(@test1, PPEG, oldSource);
test1.grammar.$compileTo = @test2;
test1.parse(newSource);
prune(@test1);
test2.$compileTo = @::ppeg;
ppeg.parse(@test2, newSource);
delete(@::ppeg.$compileTo);
delete(@::ppeg.$target);

localSource = load(PPEG_ROOT # 'ppegLocal.ppeg');
construct(@test1, PPEG, localSource);
test1.grammar.$compileTo = @test2;
newParser = test1.parse(localSource);
prune(@test1);
newParser(localSource, @regened);
if (regened !== newParser) throw('Regenerated parser is not identical');
::ppeg.compileFunction = regened;

testDigits();
print('OK!');

