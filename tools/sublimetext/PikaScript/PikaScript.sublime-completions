{
	"scope": "source.pika",

	"completions":
	[
		{ "trigger": "append", "contents": "${1:@array} = append(${1:@array}, ${2:[<elements>, ...]})" },
		{ "trigger": "compose", "contents": "${1:@array} = compose(${1:@array}, ${2:[<elements>, ...]})" },
		{ "trigger": "copy", "contents": "${4:@target} = copy(${1:@source}, ${2:+offset}, ${3:+count}, ${4:@target}, ${5:+index})" },
		{ "trigger": "decompose", "contents": "decompose(${1:@array}, ${2:[@variables, ...]})" },
		{ "trigger": "equal", "contents": "${1:?same} = equal(${2:@arrayA}, ${3:@arrayB})" },
		{ "trigger": "fill", "contents": "${1:@array} = fill(${1:@array}, ${2:+offset}, ${3:+count}, ${4:<value>})" },
		{ "trigger": "inject", "contents": "${4:@target} = inject(${1:@source}, ${2:+offset}, ${3:+count}, ${4:@target}, ${5:+index})" },

		{ "trigger": "insert", "contents": "${1:@array} = insert(${1:@array}, ${2:+offset}, ${3:[<elements>, ...]})" },
		{ "trigger": "iterate", "contents": "iterate(${1:@array}, >${2:doThis})" },
		{ "trigger": "qsort", "contents": "qsort(${1:+from}, ${2:+to}, >${3:compare}, >${4:swap})" },
		{ "trigger": "remove", "contents": "${1:@array} = remove(${1:@array}, ${2:+offset}, ${3:[+count = 1]})" },
		{ "trigger": "rsort", "contents": "${1:@array} = rsort(${1:@array})" },
		{ "trigger": "sort", "contents": "${1:@array} = sort(${1:@array})" },

		{ "trigger": "ascend", "contents": "${2:@parent} = ascend(${1:@child})" },
		{ "trigger": "clone", "contents": "${2:@target} = clone(${1:@source}, ${2:@target})" },
		{ "trigger": "foreach", "contents": "foreach(${1:@map}, >${2:doThis})" },
		{ "trigger": "map", "contents": "${1:@map} = map(${1:@map}, ${2:['keys', <values>, ...]})" },
		{ "trigger": "prune", "contents": "${2:+count} = prune(${1:@reference})" },
		{ "trigger": "redotify", "contents": "redotify(${1:'zzz%2e%2e%2e'})" },
		{ "trigger": "set", "contents": "${1:@set} = set(${1:@set}, ${2:['keys', ...]})" },
		{ "trigger": "undotify", "contents": "undotify(${1:'zzz...'})" },

		{ "trigger": "assert", "contents": "assert(${1:?testResult|>testMe}, ${2:['description']})" },
		{ "trigger": "trace", "contents": "trace(${1:[>tracer]}, ${2:[+level = 2]})" },

		{ "trigger": "describe", "contents": "describe(${1:'category'}, ${2:'page'}, ${3:'syntax'}, ${4:['description']}, ${5:['examples']}, ${6:['seealso']})" },
		{ "trigger": "help", "contents": "help(${1:'page'|'/search'})" },

		{ "trigger": "abs", "contents": "abs(${1:+x})" },
		{ "trigger": "acos", "contents": "acos(${1:+x})" },
		{ "trigger": "asin", "contents": "asin(${1:+x})" },
		{ "trigger": "atan", "contents": "atan(${1:+x})" },
		{ "trigger": "atan2", "contents": "atan2(${1:+y}, ${2:+x})" },
		{ "trigger": "cbrt", "contents": "cbrt(${1:+x})" },
		{ "trigger": "ceil", "contents": "ceil(${1:+x})" },
		{ "trigger": "cos", "contents": "cos(${1:+x})" },
		{ "trigger": "cosh", "contents": "cosh(${1:+x})" },
		{ "trigger": "cube", "contents": "cube(${1:+x})" },
		{ "trigger": "exp", "contents": "exp(${1:+x})" },
		{ "trigger": "factorial", "contents": "factorial(${1:+x})" },
		{ "trigger": "floor", "contents": "floor(${1:+x})" },
		{ "trigger": "log", "contents": "log(${1:+x})" },
		{ "trigger": "log10", "contents": "log10(${1:+x})" },
		{ "trigger": "log2", "contents": "log2(${1:+x})" },
		{ "trigger": "logb", "contents": "logb(${1:+b}, ${2:+x})" },
		{ "trigger": "nroot", "contents": "nroot(${1:+y}, ${2:+z})" },
		{ "trigger": "pow", "contents": "pow(${1:+x}, ${2:+y})" },
		{ "trigger": "random", "contents": "random(${1:+x})" },
		{ "trigger": "round", "contents": "round(${1:+x})" },
		{ "trigger": "sign", "contents": "sign(${1:+x})" },
		{ "trigger": "sin", "contents": "sin(${1:+x})" },
		{ "trigger": "sinh", "contents": "sinh(${1:+x})" },
		{ "trigger": "sqr", "contents": "sqr(${1:+x})" },
		{ "trigger": "sqrt", "contents": "sqrt(${1:+x})" },
		{ "trigger": "tan", "contents": "tan(${1:+x})" },
		{ "trigger": "tanh", "contents": "tanh(${1:+x})" },
		{ "trigger": "trunc", "contents": "trunc(${1:+x}, ${2:[+n = 0]})" },

		{ "trigger": "construct", "contents": "${1:@object} = construct(${1:@object}, >${2:constructor}, ${3:[<arguments>, ...]})" },
		{ "trigger": "destruct", "contents": "${2:+count} = destruct(${1:@object})" },
		{ "trigger": "gc", "contents": "${1:+count} = gc()" },
		{ "trigger": "invokeMethod", "contents": "${6:<result>} = invokeMethod(${1:@object}, ${2:'method'}, ${3:@args}, ${4:[+offset = 0]}, ${5:[+count]})" },
		{ "trigger": "method", "contents": "'method' = method()" },
		{ "trigger": "new", "contents": "${3:@object} = new(>${1:constructor}, ${2:[<arguments>, ...]})" },
		{ "trigger": "newLocal", "contents": "${3:@object} = newLocal(>${1:constructor}, ${2:[<arguments>, ...]})" },
		{ "trigger": "this", "contents": "${3:@object} = this()" },

		{ "trigger": "popBack", "contents": "${2:<value>} = popBack(${1:@queue})" },
		{ "trigger": "popFront", "contents": "${2:<value>} = popFront(${1:@queue})" },
		{ "trigger": "pushBack", "contents": "${1:@queue} = pushBack(${1:@queue}, ${2:<value>})" },
		{ "trigger": "pushFront", "contents": "${1:@queue} = pushFront(${1:@queue}, ${2:<value>})" },
		{ "trigger": "queueSize", "contents": "${2:+count} = queueSize(${1:@queue})" },
		{ "trigger": "resetQueue", "contents": "resetQueue(${1:@queue})" },

		{ "trigger": "bake", "contents": "${4:'concrete'} = bake(${1:'abstract'}, ${2:['escape' = \"{\"]}, ${3:['return' = \"}\"]})" },
		{ "trigger": "char", "contents": "${2:'character'} = char(${1:+code})" },
		{ "trigger": "chop", "contents": "${3:'chopped'} = chop(${1:'string'}, ${2:+count})" },
		{ "trigger": "escape", "contents": "${2:'escaped'} = escape(${1:'raw'})" },
		{ "trigger": "find", "contents": "${3:+offset} = find(${1:'string'}, ${2:'chars'})" },
		{ "trigger": "length", "contents": "${2:+count} = length(${1:'string'})" },
		{ "trigger": "lower", "contents": "${2:'lowercase'} = lower(${1:'string'})" },
		{ "trigger": "mismatch", "contents": "${3:+offset} = mismatch(${1:'first'}, ${2:'second'})" },
		{ "trigger": "ordinal", "contents": "${2:+code} = ordinal(${1:'character'})" },
		{ "trigger": "precision", "contents": "${3:'string'} = precision(${1:+value}, ${2:+precision})" },
		{ "trigger": "radix", "contents": "${4:'string'} = radix(${1:+value}, ${2:+radix}, ${3:[+minLength]})" },
		{ "trigger": "repeat", "contents": "${3:'repeated'} = repeat(${1:'repeatme'}, ${2:+count})" },
		{ "trigger": "replace", "contents": "${7:'processed'} = replace(${1:'source'}, ${2:'what'}, ${3:'with'}, ${4:[>findFunction = search]}, ${5:[+dropCount = length(what)]}, ${6:[>replaceFunction = >$1]})" },
		{ "trigger": "reverse", "contents": "${2:'backwards'} = reverse(${1:'string'})" },
		{ "trigger": "rfind", "contents": "${3:+offset} = rfind(${1:'string'}, ${2:'chars'})" },
		{ "trigger": "right", "contents": "${3:'ending'} = right(${1:'string'}, ${2:+count})" },
		{ "trigger": "rsearch", "contents": "${3:+offset} = rsearch(${1:'string'}, ${2:'substring'})" },
		{ "trigger": "rspan", "contents": "${3:+offset} = rspan(${1:'string'}, ${2:'chars'})" },
		{ "trigger": "search", "contents": "${3:+offset} = search(${1:'string'}, ${2:'substring'})" },
		{ "trigger": "span", "contents": "${3:+offset} = span(${1:'string'}, ${2:'chars'})" },
		{ "trigger": "tokenize", "contents": "tokenize(${1:'source'}, ${2:>processor}, ${3:['delimiters' = \"\n\"]})" },
		{ "trigger": "trim", "contents": "${4:'trimmed'} = trim(${1:'string'}, ${2:['leading' = \" \t\r\n\"]}, ${3:['trailing' = \" \t\r\n\"]})" },
		{ "trigger": "unescape", "contents": "${2:'raw'} = unescape(${1:'escaped'})" },
		{ "trigger": "upper", "contents": "${2:'uppercase'} = upper(${1:'string')}" },
		{ "trigger": "wildfind", "contents": "${6:+offset|void} = wildfind(${1:'source'}, ${2:'pattern'}, ${3:+from}, ${4:+to}, ${5:@captureQueue})" },
		{ "trigger": "wildmatch", "contents": "${4:?matched} = wildmatch(${1:'source'}, ${2:'pattern'}, ${3:[@captures, ...]})" },

		{ "trigger": "args", "contents": "args(${1:[@variables, ...]})" },
		{ "trigger": "classify", "contents": "${2:'class'} = classify(${1:<value>})" },
		{ "trigger": "coalesce", "contents": "${1:<value>} = coalesce(${1:<values>|@variables, ...})" },
		{ "trigger": "compare", "contents": "${3:<diff>} = compare(${1:<a>}, ${2:<b>})" },
		{ "trigger": "defaults", "contents": "defaults(${1:[@variable}, ${2:<value>, ...]})" },
		{ "trigger": "delete", "contents": "${2:?deleted} = delete(${1:@variable})" },
		{ "trigger": "evaluate", "contents": "${3:<result>} = evaluate(${1:'code'}, ${2:[@frame]})" },
		{ "trigger": "exists", "contents": "${2:?found} = exists(${1:@variable})" },
		{ "trigger": "include", "contents": "include(${1:'filePath'})" },
		{ "trigger": "input", "contents": "${2:'answer'} = input(${1:'question'})" },
		{ "trigger": "invoke", "contents": "${6:<result>} = invoke(${1:['callee']}, ${2:[>body]}, ${3:@args}, ${4:[+offset = 0]}, ${5:[+count]})" },
		{ "trigger": "load", "contents": "${2:'contents'} = load(${1:'filePath'})" },
		{ "trigger": "max", "contents": "${3:<m>} = max(${1:<x>}, ${2:<y>, [<z>, ...]})" },
		{ "trigger": "min", "contents": "${3:<m>} = min(${1:<x>}, ${2:<y>, [<z>, ...]})" },
		{ "trigger": "parse", "contents": "${3:+offset} = parse(${1:'code'}, ${2:?literal})" },
		{ "trigger": "print", "contents": "print(${1:'textLine'})" },
		{ "trigger": "run", "contents": "${3:<result>} = run(${1:'filePath'}, ${2:[<args>, ...]})" },
		{ "trigger": "save", "contents": "save(${1:'filePath'}, ${2:'contents'})" },
		{ "trigger": "sourceFor", "contents": "${3:'code'} = sourceFor(${1:@variable|@container}, ${2:['prefix' = '']})" },
		{ "trigger": "swap", "contents": "swap(${1:@a}, ${2:@b})" },
		{ "trigger": "system", "contents": "${2:+exitCode} = system(${1:'command'})" },
		{ "trigger": "throw", "contents": "throw(${1:'error'})" },
		{ "trigger": "time", "contents": "${1:+secs} = time()" },
		{ "trigger": "toSource", "contents": "${2:'literal'} = toSource(${1:<value>})" },
		{ "trigger": "try", "contents": "${2:'exception'} = try(>${1:doThis})" },
		{ "trigger": "vargs", "contents": "vargs(${1:[@arguments, ...]}, ${2:, [@optionals, ...]})" }

	]
}

