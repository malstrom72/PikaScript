########################################
#									   #
#		   PEG for PikaScript		   #
#									   #
#  Copyright 2008-2025                 #
#  NuEdge Development                  #
#									   #
########################################

# ----------------------------------------------------------------------------------------------------------------------

root		<-									{
													$t = $$parser.$compileTo;
													$$parser.$target = (if ($t{:2} == '::') $t
															else ('[' # escape($t) # ']'));
												}
				( Spacing b=PikaBlock			{ evaluate(replace($b, "\x24\x24parser", $$parser.$target), $$parser.$compileTo) }
				)? Spacing Grammar

# ----------------------------------------------------------------------------------------------------------------------


#############################
#	 Hierarchical syntax	#
#############################


# ----------------------------------------------------------------------------------------------------------------------

Grammar		<-	Spacing Definition* EndOfFile

# ----------------------------------------------------------------------------------------------------------------------

Definition	<-	id:Identifier LEFTARROW			{ $$.tag = '$0'; $$.vi = 0 }
					Expression					{ [$$parser.$compileTo][$id] = evaluate('function{' # $$ # '}') }

# ----------------------------------------------------------------------------------------------------------------------

Expression	<-									{ $s.vi = $$.vi + 1; $s.tag = $$.tag; $$ = '' }
				s:Sequence						{ $$ = $s }
				( SLASH s:Sequence				{ $$ #= '||' # $s }
				)*								{ $$ = '{$b' # $s.vi # '=::ppi;' # $$ # '}' }

# ----------------------------------------------------------------------------------------------------------------------

Sequence	<-									{ clone(@$$, @$p); $$ = '' }
				( p:(Prefix / Action)			{ $$ #= (if ($$ != '') '&&') # $p }
				)*								{
													if ($$ == '') $$ = 'true'
													else $$ #= '||{if(::ppi>::ppm)::ppm=::ppi;::ppi=$b' # $$.vi # ';false}'
												}

# ----------------------------------------------------------------------------------------------------------------------

Action		<-	b=PikaBlock Spacing				{
													for ($s = '{'; $b != ''; ) {
														$s #= $b{:i = find($b, "$/\t\r\n")};
														if (($b = $b{i:}){0} == '$') {
															if ($b{:8} == "\x24\x24parser") { $s #= $$parser.$target; $b = $b{8:} }
															else if ($b{:3} == "\x24\x24s") { $s #= '::pps'; $b = $b{3:} }
															else if ($b{:3} == "\x24\x24i") { $s #= '::ppi'; $b = $b{3:} }
															else if ($b{:2} == "\x24\x24") { $s #= '[$0]'; $b = $b{2:} }
															else { $s #= '$'; $b = $b{1:} }
														} else if ($b{:2} == '//') { $s #= $b{:i = find($b, "\n") + 1}; $b = $b{i:} }
														else if ($b{0} == '/') { $s #= '/'; $b = $b{1:} }
														else {
															if ($s{length($s) - 1} != ' ') $s #= ' ';
															$b = $b{span($b, "\t\r\n "):}
														}
													};
													$$ = $s # ';true}'
												}
												
# ----------------------------------------------------------------------------------------------------------------------

Prefix		<-									{ $c.vi = $$.vi; $c.tag = $$.tag }
				AND c:Capture					{ $$ = '{$l' # $$.vi # '=::ppi' # ';$x=' # $c # ';::ppi=$l' # $$.vi # ';$x}' }
				/ NOT c:Capture					{ $$ = '{$l' # $$.vi # '=::ppi' # ';$x=' # $c # ';::ppi=$l' # $$.vi # ';!$x}' }
				/ Capture

# ----------------------------------------------------------------------------------------------------------------------

Capture		<-	v:Variable EQUALS Tagged		{
													$$ = '{$m' # $$.vi # '=::ppi;' # $$
															# '&&{' # $v # '=::pps{$m' # $$.vi # ':'
															# '::ppi-$m' # $$.vi # '};true}}'
												}
				/ Tagged						

# ----------------------------------------------------------------------------------------------------------------------

Tagged		<-	v:Variable COLON				{ $t.vi = $$.vi; $t.tag = '@' # $v }
					t:Suffix					{ $$ = $t }
				/ Suffix
				
# ----------------------------------------------------------------------------------------------------------------------

Suffix		<-	Primary ( QUESTION				{ $$ = '{' # $$ # ';true}' }
						  / STAR				{ $$ = '{for(;' # $$ # ';);true}' }
						  / PLUS				{ $$ = '{false;for(;' # $$ # ';)true}' }
				)?

# ----------------------------------------------------------------------------------------------------------------------

Primary		<-	Identifier !LEFTARROW			{ $$ = $$parser.$target # '.' # $$ # '(' # $$.tag # ')' }
				/ Literal						{
													l = length($$);
													if (l == 0) $$ = 'true'
													else if (l == 1) $$ = '(::pps{::ppi}===' # escape($$) # ')&&{++::ppi;true}'
													else $$ = '(::pps{::ppi:' # l # '}===' # escape($$) # ')&&{::ppi+=' # l # ';true}'
												}
				/ Class							{ $$ = '(span(::pps{::ppi},' # escape($$) # ')==1)&&{++::ppi;true}' }
				/ DOT							{ $$ = '(::pps{::ppi}!='''')&&{++::ppi;true}' }
				/ OPEN Expression CLOSE

# ----------------------------------------------------------------------------------------------------------------------


########################
#	 Lexical syntax	   #
########################


# ----------------------------------------------------------------------------------------------------------------------

Identifier	<-	$$=(IdentStart IdentCont*) Spacing

# ----------------------------------------------------------------------------------------------------------------------

IdentStart	<-	[a-zA-Z_]

# ----------------------------------------------------------------------------------------------------------------------

IdentCont	<-	IdentStart / [0-9] 

# ----------------------------------------------------------------------------------------------------------------------

Variable	<-	( '$$'							{ $$ = '[$0]' }
				  / $$=PikaVar					{ $$ = '$' # $$ }
				) Spacing

# ----------------------------------------------------------------------------------------------------------------------

Literal		<-									{ $$ = '' }
				['] ( !['] c:Char				{ $$ #= $c }
				)* ['] Spacing
				/ ["] ( !["] c:Char				{ $$ #= $c }
				)* ["] Spacing

# ----------------------------------------------------------------------------------------------------------------------

Class		<-									{ $$ = '' }
				'[' ( !']' r:Range				{ $$ #= $r }
				)* ']' Spacing

# ----------------------------------------------------------------------------------------------------------------------

Range		<-	f:Char '-' t:Char				{ $$ = ''; for (i = ordinal($f); i <= ordinal($t); ++i) $$ #= char(i); }
				/ $$:Char

# ----------------------------------------------------------------------------------------------------------------------

Char		<-	"\\" x=[nrt'"\[\]\\]			{ $$ = "\n\r\t'\"[]\\"{find("nrt'\"[]\\", $x)} }
				/ "\\" x=([0-3][0-7][0-7])		{ $$ = char($x{0} * 64 + $x{1} * 8 + $x{2}) }
				/ "\\" x=([0-7][0-7])			{ $$ = char($x{0} * 8 + $x{1}) }
				/ "\\" x=([0-7])				{ $$ = char($x{0}) }
				/ ![\\\0-\37] $$=.

# ----------------------------------------------------------------------------------------------------------------------

Spacing		<-	(Space / Comment)*

# ----------------------------------------------------------------------------------------------------------------------

Comment		<-	'#' (!EndOfLine .)* (EndOfLine / EndOfFile)

# ----------------------------------------------------------------------------------------------------------------------

Space		<-	' ' / "\t" / EndOfLine

# ----------------------------------------------------------------------------------------------------------------------

EndOfLine	<-	"\r\n" / "\n" / "\r"

# ----------------------------------------------------------------------------------------------------------------------

EndOfFile	<-	!.

# ----------------------------------------------------------------------------------------------------------------------


#################
#	 Actions	#
#################


# ----------------------------------------------------------------------------------------------------------------------

PikaVar		<-	[a-zA-Z_] ( '.'? [a-zA-Z$_0-9] )*

# ----------------------------------------------------------------------------------------------------------------------

PikaBlock	<-	'{' ( &'{' PikaBlock
					/ &["'] PikaString
					/ &('/*' / '//') PikaComment
					/ !'}' .
					)* '}'

# ----------------------------------------------------------------------------------------------------------------------

PikaString	<-	'"' ( ('\\' / !'"') . )* '"' / "'" ( ("''" / !"'" .) )* "'"

# ----------------------------------------------------------------------------------------------------------------------

PikaComment	<-	'/*' (!'*/' .)* '*/' / "//" (!EndOfLine .)* (EndOfLine / EndOfFile)

# ----------------------------------------------------------------------------------------------------------------------


################
#	 Tokens	   #
################


# ----------------------------------------------------------------------------------------------------------------------

LEFTARROW	<-	'<-' Spacing
SLASH		<-	'/' Spacing
AND			<-	'&' Spacing
NOT			<-	'!' Spacing
QUESTION	<-	'?' Spacing
STAR		<-	'*' Spacing
PLUS		<-	'+' Spacing
OPEN		<-	'(' Spacing
CLOSE		<-	')' Spacing
DOT			<-	'.' Spacing
COLON		<-	':' Spacing
EQUALS		<-	'=' Spacing

# ----------------------------------------------------------------------------------------------------------------------
