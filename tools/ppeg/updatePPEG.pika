include('systools.pika');
include('stdlib.pika');
include('ppeg.pika');

SRC_ROOT = run.root # './';

oldSource = newSource = load(SRC_ROOT # 'ppegGlobal.ppeg');
construct(@test1, PPEG, oldSource);
print('Successfully compiled source (syntax is alright)');
test1.grammar.$compileTo = @test2;
test1.parse(newSource);
print('Successfully compiled itself once (generated a new compiler)');
prune(@test1);
test2.$compileTo = @::ppeg;
ppeg.parse(@test2, newSource);
print('Successfully compiled itself twice (can regenerate)');
delete(@::ppeg.$compileTo);
delete(@::ppeg.$target);

localSource = load(SRC_ROOT # 'ppegLocal.ppeg');
construct(@test1, PPEG, localSource);
print('Successfully compiled source for "local" version (syntax is alright)');
test1.grammar.$compileTo = @test2;
newParser = test1.parse(localSource);
print('Successfully compiled itself once (generated a new compiler)');
prune(@test1);
newParser(localSource, @regened);
if (regened !== newParser) throw('Regenerated parser is not identical');
print('Successfully compiled itself twice (can regenerate)');
::ppeg.compileFunction = regened;

save(run.root # 'initPPEG.pika', sourceFor(@::ppeg));
print('initPPEG.pika replaced');

