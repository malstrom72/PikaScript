#################################
#								#
#    JSON Monolithic PikaPEG    #
#								#
#################################

#
#	This one creates a monolithic data-structure at the predesignated target ($$.target). E.g.:
#	{ "firstLevel": { "secondLevel":null } } parsed to @block generates: block.firstLevel.secondLevel = 'null'
#
#	Keys are "un-dotified" which means that periods are escaped. E.g.: { "..." : [ "data", "data", "data" ] } generates:
#	object.%2e%2e%2e.0 = 'data', object.%2e%2e%2e.1 = 'data' etc. See help('undotify') for the rationale behind this.
#
#	The default value for null is <null>. You can choose another value (e.g. "null", void or "\0") by defining $$.null.
#
#	Existing elements under target are not automatically deleted before parsing so you may want to consider calling
#	prune or destruct on the target first.
#
#	Read more about JSON here: http://www.json.org/
#

{
	/*
		This function is required since JSON (strangely) supports an escaped solidus, whereas PikaScript does not.
		All other JSON escapes are supported by PikaScript, so we let them through to the evaluate() function.
	*/
	$$parser.unsolidus = function {
		for (out = ''; $0 != '';) {
			out #= $0{:i = find($0, '\')};
			if (($0 = $0{i:}){0} == '\') { out #= (if ($0{1} == '/') '/' else $0{:2}); $0 = $0{2:} }
		};
		( out )
	}
}

root		<-	_												{ $$parser.null = coalesce(@$$.null, <null>); }
				(object / array) !.

object		<-	"{"_ ( member (","_ member)* )? "}"_

member		<-	id:string ":"_									{ $v.target = @[$$.target][undotify($id)] }
				v:value

value		<-	string											{ [$$.target] = $$ }
				/ number										{ [$$.target] = $$ }
				/ "true" _										{ [$$.target] = true }
				/ "false" _										{ [$$.target] = false }
				/ "null" _										{ [$$.target] = $$parser.null }
				/ object										# will go into already designated target
				/ array											# - " -

array		<-	"["_ (											{ [$$.target].n = 0; $v.target = @[$$.target][0] }
					v:value (","_								{ $v.target = @[$$.target][++[$$.target].n] }
					v:value)*									{ ++[$$.target].n }
					)? "]"_

string		<-	$$=( '"' ( !["\\\0-\37] . / "\\" ( ["\\/bfnrt]
					/ 'u' HEX HEX HEX HEX ) )* '"' ) _			{ $$ = unescape($$parser.unsolidus($$)) }

number		<-	$$=( "-"? ("0" / [1-9] DIGIT*) ("." DIGIT+)?
						( [eE][-+]? DIGIT+ )? ) _				{ $$ = evaluate('+' # $$) }

HEX			<-	[0-9a-fA-F]

DIGIT		<-	[0-9]

_			<-	[ \t\r\n]*
