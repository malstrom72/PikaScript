/*
	debug.pika v0.941

	PikaScript is released under the "New Simplified BSD License". http://www.opensource.org/licenses/bsd-license.php
	
	Copyright (c) 2009-2013, NuEdge Development / Magnus Lidstroem
	All rights reserved.
*/

include('stdlib.pika');

CONSOLE_COLS = 120;
CONSOLE_ROWS = 30;

assert = function {
	if (!(if (classify($0) === 'function') $0() else $0)) throw('Assertion failure: ' # coalesce(@$1, @$0));
	( void )
};

limitLength = function { if (length($0) <= $1) ( $0 ) else ( $0{:$1 - 3} # '...' ) };
singleLine = function { replace($0, "\t\r\n", ' ', find, 1) };

// FIX : use "more" (or implement same functionality here)...
dump = function {
	vargs(, @var); defaults(@var, @^);
	print('Dumping ' # var # ' of ' # describeCall(var) # LF # repeat('=', 8));
	if (exists(var)) print(var # ' = ' # limitLength(singleLine(toSource([var])), CONSOLE_COLS - length(var) - 3));
	foreach(var, >print($1 # ' = ' # limitLength(singleLine(toSource($2)), CONSOLE_COLS - length($1) - 3)));
	( void )
};

// FIX : shouldn't be required... we should build the "more" facility into interactive.pika.
more = function {
	args(@s);
	lineOut => if (!silent) {
		print($0);
		if (++lc >= CONSOLE_ROWS) {
			lc = 0;
			if (lower(input("---- more (yes)? ")){0} === 'n') silent = true;
		}
	};
	lc = 0;
	silent = false;
	tokenize(s, >if (!silent) lineOut($0));
	( void )
};

// FIX : overlaps with dump, and I don't like the name, too generic
//show = function {
//	args(@var);
//	more(var # if (classify(var) === 'reference' && (s = sourceFor(var, ' ')) !== '')
//			(LF # repeat('=', 8) # LF # s # repeat('=', 8)));
//	( void )
//};

describeCall = function {
	s = (if (exists(@[$0].$callee)) [$0].$callee else '(unknown)') # '(';
	if (exists(@[$0].$n)) {
		for (i = 0; i < [$0].$n; ++i) {
			if (exists(@[$0].$[i])) s #= limitLength(singleLine(toSource([$0].$[i])), CONSOLE_COLS);
			if (i < [$0].$n - 1) s #= ', '
		}
	};
	s #= ')';
	( s )
};

callstack = function {
	vargs(, @frame, @prefix); defaults(@frame, @^, @prefix, '');
	for (; { print(prefix # describeCall(frame)); frame !== '::'; }; frame = @[frame # '^']) ;
	( void )
};

NO_TRACE_LEVEL = 0;
ERROR_TRACE_LEVEL = 1;
CALL_TRACE_LEVEL = 2;
LOOP_TRACE_LEVEL = 3;
STATEMENT_TRACE_LEVEL = 4;
BODY_TRACE_LEVEL = 5;
ARGUMENT_TRACE_LEVEL = 6;
BRACKET_TRACE_LEVEL = 7;
MAX_TRACE_LEVEL = 22;

traceVerbose = function {
	trace(function {
		if (!exists(@^$callee) || !exists(@::traceVerbose.filter[^$callee])) {
			args(@source, @offset, @lvalue, @result, @level, @exit);
			if (level == CALL_TRACE_LEVEL) {
						// FIX : subroutine
				if (exists(@^$callee)) source = ^$callee;
				s = (if (exit) '}-- ' else '--{ ') # describeCall(@^);
				if (exit) s #= ' = ' # limitLength(singleLine(toSource(result)), CONSOLE_COLS \ 4);
			} else {
			// FIX : use repeat
				fixedWidth = function { $0 = $0{:$1}; for (; length($0) < $1; $0 #= ' ') ; $0 };
				s = ' ' # fixedWidth(singleLine(source{offset - 4:4}), 4) # ' <> ' # fixedWidth(singleLine(source{offset:}), CONSOLE_COLS \ 4)
						# ' | (' # (if (exit) '<' else '>') # level # ') ' # (if (lvalue) result else limitLength(singleLine(toSource(result)), CONSOLE_COLS \ 4));
			};
			print(s);
		}
	}, coalesce(@$0, CALL_TRACE_LEVEL));
	( void )
};

traceCalls = function {
	::traceCalls.depth = 0;
	::traceCalls.filter['args'] = true;
	::traceCalls.filter['vargs'] = true;
	::traceCalls.filter['defaults'] = true;
	trace(function {
		if (!exists(@^$callee) || !exists(@::traceCalls.filter[^$callee])) {
			args(@source, @offset, @lvalue, @result, @level, @exit);
			if (level == ERROR_TRACE_LEVEL) print(' !!!! ' # result);
			if (level == CALL_TRACE_LEVEL) {
				s = describeCall(@^);
				if (!exit) ++::traceCalls.depth
				else {
					s #= ' = ' # limitLength(singleLine(toSource(result)), CONSOLE_COLS \ 4);
					--::traceCalls.depth;
				};
				print(repeat(' ', traceCalls.depth) # s);
			}
		}
	}, CALL_TRACE_LEVEL);
	( void )
};

debug.tracer = function {
// TODO : slimline
	args(@source, @offset, @lvalue, @result, @level, @exit);
	leave = false;
	if (level == ERROR_TRACE_LEVEL) {
		exit = false; // for the error level, exit just indicates that it is the last catch in the chain
		print(' !!!! ' # result);
		::debug.callDepth = 0;
	};
	if (exit) {
		if (level == CALL_TRACE_LEVEL) --::debug.callDepth;
		if (debug.callDepth <= 0) {
			if (!::debug.lastWasExit) print(' (' # (if (lvalue) result else replace(limitLength(toSource(result), CONSOLE_COLS \ 4), "\n", ' ')) # ')');
			if (debug.callDepth < 0 && level == CALL_TRACE_LEVEL) print(' <<<<');
		}
	} else {
		if (level == CALL_TRACE_LEVEL) ++::debug.callDepth;
		if (debug.callDepth <= 0) {
			help = "enter   step over\n    >   step in\n    <   step out\n    ^   continue\n    !   stop\n    =   dump locals\n    :   dump globals\n    (   call-stack\n    {   show function\n\nanything else evaluates expression\n";
			prompt = replace(source{offset:81}, "\t", ' ');
			prompt = limitLength(prompt{:find(prompt, "\n")}, CONSOLE_COLS);
			if (level != CALL_TRACE_LEVEL) prompt = ' >>>> ' # prompt
			else prompt = ' ===> ' # describeCall(@^);
			for (; {
					print(prompt);
					s = input('debug> ');
					if (s === '^') { leave = true; false; }
					else if (s === '<') { ::debug.callDepth = 1; false; }
					else if (s === '>') { ::debug.callDepth = -1; false; }
					else if (s === '') { ::debug.callDepth = 0; false; }
					else true;
				} ; ) {
				if (s === '?') print(help)
				else if (s === '!') throw('Debugger stop')
				else if (s === '=') dump(@^) // FIX : also list non-closure @^$ in case closure frame differs from $ frame
				else if (s === ':') dump(@::)
				else if (s === '{') print(source{:offset} # ' <####> ' # source{offset:}) // FIX : display func name first
				else if (s === '(') callstack(@^)
				else {
					x = try(>s = evaluate(s, @^^^$));
					print(if (x !== void) x else s);
				}
			}
		}
	};
	::debug.lastWasExit = exit;
	if (leave) traceLevel = ERROR_TRACE_LEVEL
	else if (debug.callDepth > 0) traceLevel = CALL_TRACE_LEVEL
	else traceLevel = BODY_TRACE_LEVEL;
	trace(debug.tracer, traceLevel);
	( void )
};

debug = function {
	::debug.lastWasExit = false;
	if (exists(@$0)) {
		::debug.callDepth = -1;
		trace(debug.tracer, CALL_TRACE_LEVEL);
		$0();
	} else {
		::debug.callDepth = 1;
		trace(debug.tracer, CALL_TRACE_LEVEL);
		print('*** DEBUGGER BREAK ***');
		( void );
	}
};

traceErrors = function {
	trace(function {
		args(@source, @offset, @lvalue, @result, @level, @exit);
		CC4 = CONSOLE_COLS \ 4;
		s = singleLine(source{offset - CC4:CC4} # ' <!!!!> ' # source{offset:CC4});
		if (offset > CC4) s = '... ' # s;
		if (offset + CC4 < length(source)) s #= ' ...';
		print('   ! ' # describeCall(@^) # ' !   ' # s);
//		if (exit) print('!!!! ' # result);
		if (exit) print('');
	}, ERROR_TRACE_LEVEL);
};

profile = function {
	::profiler.dump = function { dump(@::profiler.counters); };
	::profiler.reset = function { prune(@::profiler.counters); };
	::profiler.tick = function { 
		::profiler.ticker = ::profiler.skip;
		if ((t = time()) != ::profiler.last) {
			::profiler.last = t;
			if (exists(f = @^^$callee)) {
				print('');
				c = @::profiler.counters[[f]];
				defaults(c, 0);
				[c]++;
				print('   @ ' # [f] # ': ' # [c]);
args(@source, @offset);
CC4 = CONSOLE_COLS \ 2 - 16 - 5;
s = singleLine(source{offset - CC4:CC4} # ' <####> ' # source{offset:CC4});
if (offset > CC4) s = '... ' # s;
if (offset + CC4 < length(source)) s #= ' ...';
print('     ' # s);
				callstack(@^^, '     ');
				print('');
			}
		}
	};

	::profiler.ticker = 0;
	trace(function { ++::profiler.ticker; }, STATEMENT_TRACE_LEVEL);
	print('Calibrating...');
	for (t = time(); (t2 = time()) == t;);
	for (::profiler.ticker = 0; time() == t2;) wildmatch(random(1), '[0-8.]*');
	::profiler.skip = (::profiler.ticker \= 4);
	print("Profiling started.\n\nprofiler.dump() show accumulated call counts.\nprofiler.reset() resets call counts.\ntrace() stops profiling.");
	::profiler.last = time();
	trace(function { if (--::profiler.ticker <= 0) profiler.tick($0, $1); }, STATEMENT_TRACE_LEVEL);
	( void )
};

clock = function {
	args(@func);
	print('----- Clocking...');
	for (t = time() + 1; time() < t;);
	ipersec = { i = 0; for (++t; time() < t;) ++i; };
	func();
	j = 0; for (u = time() + 1; time() < u; ++j);
	print('----- Clocked: ' # (u - t - min(j, ipersec) / ipersec) # ' secs');
	( void )
};

traceErrors();

// Define dummy help that loads the help.pika on demand.
help = function { /****    Type help() to get started.    ****/        run('help.pika'); invoke('help', , @$) };

void;
