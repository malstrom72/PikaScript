/*
	stdlib.pika v0.943

	PikaScript is released under the "New Simplified BSD License". http://www.opensource.org/licenses/bsd-license.php
	
	Copyright (c) 2009-2019, NuEdge Development / Magnus Lidstroem
	All rights reserved.
*/

// --- Utils ---

args = function {
	if (^$n != $n) throw(if (^$n > $n) 'Too many arguments' else 'Too few arguments');
	for (i = 0; i < $n; ++i) [$[i]] = ^$[i]
};
assert = function { };
classifiers[''] = function { 'void' };
classifiers['f'] = function { if ($0 === 'false') 'boolean' else 'string' };
classifiers['t'] = function { if ($0 === 'true') 'boolean' else 'string' };
classifiers['{'] = function { if ($0{length($0) - 1} === '}') 'function' else 'string' };
classifiers['>'] = function { if ($0{1} === ':' && span(':', $0{2:}) == 1) 'function' else 'string' };
classifiers[':'] = function { if (span(':', $0{1:}) == 1) 'reference' else 'string' };
classifiers['<'] = function { if ($0{length($0) - 1} === '>') 'native' else 'string' };
for ($i = 0; $i < 12; ++$i)
	classifiers['0123456789+-'{$i}] = function { if (parse($0, true) == length($0)) 'number' else 'string' };
classify = function { if (exists(p = @::classifiers[$0{0}])) [p]($0) else 'string' };
coalesce = function {
	r = void;
	for (i = 0; i < $n && ((r = $[i]) === void || classify(r) === 'reference' && if (!exists(r)) { r = void; true }
			else { r = [r]; false }); ++i);
	( r )
};
compare = function { if ($0 < $1) -1 else if ($0 > $1) 1 else 0 };
defaults = function { for (i = 0; i + 2 <= $n; i += 2) if (!exists($[i])) [$[i]] = $[i + 1] };
max = function { for (i = 1; i < $n; ++i) if ($[i] > $0) $0 = $[i]; ( $0 ) };
min = function { for (i = 1; i < $n; ++i) if ($[i] < $0) $0 = $[i]; ( $0 ) };

// FIX : sourceFor is outdated, we have new rules for dots etc in subscription
sourceFor = function {
	vargs(@var, , @prefix);
	defaults(@prefix, '');
	s0 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$';
	sX = s0 # '0123456789';
	toSymbol => {
		// FIX : doesn't work with arrays :(, becomes a.3 instead of a[3] (I need to look at every first char after .)
		if (find(($0 = $0{1 + find($0{1:}, ':') + 1:}){0}, s0) == 0 && span($0{1:}, sX) >= length($0) - 1
				&& search($0, '..') >= length($0)) ( $0 )
		else ( '[' # escape($0) # ']' )
	};
	src = '';
	// FIX : can't really use toSource because of the ambiguity with function and strings like '{ alfons aaberg }' ...
	if (exists(var)) src #= prefix # toSymbol(var) # ' = ' # toSource([var]) # ';' # LF;
	buffer = '';
	foreach(var, >{
		buffer #= prefix # toSymbol($0) # ' = ' # toSource($2) # ';' # LF;
		if (length(buffer) >= 2048) { src #= buffer; buffer = '' }
	});
	( src # buffer )
};
swap = function { t = [$0]; [$0] = [$1]; [$1] = t };

// FIX : This function will describe any string looking like a function, e.g. '{ wrong!! }' as a function, even if it isn't.
toSource = function {
	if ((c = classify($0)) === 'void') ( c )
	else if (c === 'string') ( escape($0) )
	else if (c === 'function') if ($0{0} !== '>') ( 'function ' # $0 ) else ( escape($0) )
	else if (c === 'reference') if ($0{0:2} === '::') ( '@' # $0 ) else ( escape($0) )
	else ( $0 )
};
vargs = function {
	for (i = 0; i < $n && exists(@$[i]); ++i) {
		if (i >= ^$n) throw('Too few arguments');
		if (exists(@^$[i])) [$[i]] = ^$[i]
	};
	for (++i; i < $n; ++i) if (i <= ^$n && exists(@^$[i - 1])) [$[i]] = ^$[i - 1] else delete($[i]);
	if (i <= ^$n) throw('Too many arguments');
	( i - 1 )
};

// --- Strings ---

CR = "\r";
LF = "\n";
TAB = "\t";
WS = " \t\r\n";
bake = function {
	openLength = length(open = coalesce(@$1, '{'));
	closeLength = length(close = coalesce(@$2, '}'));
	for ({ out = ''; in = $0 }; in !== ''; ) {
		out #= in{:(i = search(in, open))};
		if ((in = in{i:}) !== '') {
			i = parse(in = in{openLength:}, false);
			out #= evaluate(in{:i}, @^$);
			if (in{i:closeLength} !== close) throw('Missing ' # escape(close));
			in = in{i + closeLength:};
		}
	};
	( out )
};
chop = function { $0{:length($0) - $1} };
repeat = function { $1 *= length($0); for (s = $0; length(s) < $1;) s #= s; ( s{:$1} ) };
replace = function {
	vargs(@src, @what, @with, , @findFunction, @dropCount, @replaceFunction);
	defaults(@findFunction, search, @dropCount, length(what), @replaceFunction, >$1);
	if (dropCount <= 0) throw('Invalid drop count argument for replace()');
	for (d = ''; { d #= src{:i = findFunction(src, what)}; i < length(src) }; src = src{i + dropCount:})
		d #= replaceFunction(src{i:dropCount}, with);
	( d )
};
rfind = function { length($0) - 1 - find(reverse($0), $1) };
right = function { $0{length($0) - $1:} };
rspan = function { length($0) - 1 - span(reverse($0), $1) };
rsearch = function { length($0) - length($1) - search(reverse($0), reverse($1)) };
tokenize = function {
	vargs(@src, @func, , @delim);
	defaults(@delim, LF);
	for (; src !== ''; ) {
		func(src{:(i = find(src, delim))});
		src = src{i + 1:};
	};
	( void )
};
trim = function {
	vargs(@src, , @leading, @trailing);
	b = span(src, coalesce(@leading, WS));
	e = rspan(src, coalesce(@trailing, WS));
	( src{b:e + 1 - b} )
};
unescape = function { if (span($0{0}, "\"'") != 1) throw('Invalid string literal'); ( evaluate($0) ) };

// FIX : move to parsing.pika
wildfind = function /* $0=string, $1=pattern, $2=from, $3=to, $4=captureQueue */ {
	if ((brk = find($1, '*?~[{}')) != 0) {
		for ({ i = $2; $3 = min($3, length($0) - (l = length($1{:brk}))) }
				; (i += search($0{i:$3 + l - i}, $1{:brk})) <= $3 && wildfind($0, $1{brk:}, i + l, i + l, $4) === void
				; ++i)
	} else if ($1 === '') i = length($0)
	else if ((c = $1{0}) === '{' || c === '}') {
		if ((i = wildfind($0, $1{1:}, $2, $3, $4)) !== void)
			if (c === '{') { pushFront($4, popBack($4) - i); pushFront($4, i) } else pushBack($4, i)
	} else {
		set = '';
		if (c === '[') {
			if ($1{:2} === '[^' && $1{:3} !== '[^]' || $1{:4} === '[^]]') { findf = span; spanf = find; $1 = $1{2:} }
			else { findf = find; spanf = span; $1 = $1{1:} };
			for (; $1 !== '' && $1{0} !== ']' || $1{:2} === ']]' || $1{:3} === ']^]'; $1 = $1{i:}) {
				set #= $1{:i = 1 + find($1{1:}, '-]')};
				if ($1{i} === '-' && $1{i + 1} !== ']') {
					for ({ f = ordinal($1{i - 1}) + 1; t = ordinal($1{i + 1}) }; f <= t; ++f) set #= char(f);
					i += 2;
				}
			};
			$1 = $1{1:}
		};
		if (set === '') { findf => 0; spanf = length };
		mini = span($1, '?');
		$1 = $1{(maxi = mini + span($1{mini:}, '~')):};
		if (maxi == mini && $1{0} === '*') { maxi = 0x7FFFFFFF; $1 = $1{1:} }
		else if (mini == 0 && maxi == 0) mini = maxi = 1;
		if (mini == 0) findf => 0;
		for (i = $2; (i += findf($0{i:$3 + 1 - i}, set)) <= $3 && ((n = spanf($0{i:maxi}, set)) < mini
				|| wildfind($0, $1, i + mini, i + n, $4) === void); i += max(n - mini, 0) + 1)
	};
	( if (i <= $3) i else void )
};
wildmatch = function {
	resetQueue(@cq);
	if (found = (wildfind($0, $1, 0, 0, @cq) == 0)) {
		for (i = 2; i < $n; ++i) { offset = popFront(@cq); length = popFront(@cq); [$[i]] = $0{offset:length} }
	};
	( found )
};

// --- Math ---

E = 2.71828182845904523536;
PI = 3.14159265358979323846;
cbrt = function { pow(abs($0), 1 / 3) * sign($0) };
cube = function { $0 * $0 * $0 };
factorial = function { if (~~$0 > 170) ( +infinity ) else { v = 1; for (i = 2; i <= $0; ++i) v *= i } };
log2 = function { log($0) * 1.44269504088896340736 };
logb = function { log($1) / log($0) };
nroot = function { pow($1, 1 / $0) };
round = function { floor($0 + 0.5) };
sign = function { if ($0 < 0) -1 else if ($0 > 0) 1 else 0 };
sqr = function { $0 * $0 };
trunc = function {
	m = (if (exists(@$1)) pow(10, min(max(~~$1, 0), 23)) else 1);
	( (if ($0 < 0) ceil($0 * m) else floor($0 * m)) / m )
};

// --- Containers ---

ascend = function { $0{:rfind($0, '.')} };
clone = function { t = $1; foreach($0, >[t][$1] = $2); if (exists($0)) [t] = [$0]; ( $1 ) };
map = function { for (i = 1; i + 2 <= $n; i += 2) [$0][$[i]] = $[i + 1]; ( $0 ) };
prune = function { n = 0; foreach($0, >if (delete($0)) ++n); if (delete($0)) ++n; ( n ) };
redotify = function { replace($0, '%', void, find, 3, >char(evaluate('0x' # $0{1:}))) };
set = function { for (i = 1; i < $n; ++i) [$0][$[i]] = true; ( $0 ) };
undotify = function { replace($0, '.%', void, find, 1, >'%' # radix(ordinal($0), 16, 2)) };

// --- Arrays ---

append = function { defaults(@[$0].n, 0); for (i = 1; i < $n; ++i) [$0][[$0].n++] = $[i]; ( $0 ) };
compose = function { for (i = 1; i < $n; ++i) if (exists(@$[i])) [$0][i - 1] = $[i]; [$0].n = $n - 1; ( $0 ) };
copy = function {
	if ($1 >= $4) for (i = 0; i < $2; ++i) [$3][$4 + i] = [$0][$1 + i]
	else for (i = $2 - 1; i >= 0; --i) [$3][$4 + i] = [$0][$1 + i];
	[$3].n = max(coalesce(@[$3].n, 0), $4 + $2);
	( $3 )
};
decompose = function { for (i = 1; i < $n; ++i) if (exists(@$[i])) [$[i]] = [$0][i - 1]; ( void ) };
equal = function { ( [$0].n == [$1].n && { for (i = 0; i < [$0].n && [$1][i] == [$0][i];) ++i; } == [$0].n ) };
fill = function { for (i = $1 + $2; --i >= $1;) [$0][i] = $3; [$0].n = max(coalesce(@[$0].n, 0), $1 + $2); ( $0 ) };
inject = function {
	if ($4 < 0 || $4 > [$3].n) throw('Insertion index out of bounds');
	[$3].n += $2;
	for (i = [$3].n - 1; i >= $4 + $2; --i) [$3][i] = [$3][i - $2];
	for (; i >= $4; --i) [$3][i] = [$0][i - $4 + $1];
	( $3 )
};
insert = function { inject(@$, 2, $n - 2, $0, $1) };
iterate = function {
	for ({ i = coalesce(@[$0].m, 0); n = [$0].n }; i < n; ++i) if (exists(p = @[$0][i])) $1(p, i, [p]) else $1(p, i);
	( i )
};
qsort = function {
	for (--$1; $0 + 1 < $1; $0 = $l) {
		for ({ $l = $0; $h = $1; $m = ($l + $h) \ 2 }; $l < $h; ) {
			for (; $l <= $h && $2($l, $m) <= 0 && $2($h, $m) >= 0; { ++$l; --$h });
			for (; $l <= $h && $2($h, $m) > 0; --$h);
			for (; $l <= $h && $2($l, $m) < 0; ++$l);
			if ($m == $l || $m == $h) $m ^= $h ^ $l;
			if ($l < $h) $3($l, $h);
		};
		qsort($0, $l, $2, $3)
	};
	if ($0 < $1 && $2($0, $1) > 0) $3($0, $1)
};
remove = function {
	n = [$0].n;
	$2 = (if (exists(@$2)) max($2, 0) else 1) + min($1, 0);
	$1 = max($1, 0);
	[$0].n = $1 + max(n - $1 - $2, 0);
	for (i = $1; i < [$0].n; ++i) [$0][i] = [$0][i + $2];
	for (; i < n; ++i) delete(@[$0][i]);
	( $0 )
};
rsort = function { args(@a); qsort(0, [a].n, >-compare([a][$0], [a][$1]), >swap(@[a][$0], @[a][$1])); ( a ) };
sort = function { args(@a); qsort(0, [a].n, >compare([a][$0], [a][$1]), >swap(@[a][$0], @[a][$1])); ( a ) };

// --- Queues ---

resetQueue = function { [$0].m = [$0].n = 0 };
queueSize = function { [$0].n - [$0].m };
popBack = function { if ([$0].n - [$0].m <= 0) throw('Queue underrun'); v = [r = @[$0][--[$0].n]]; delete(r); ( v ) };
pushBack = function { [$0][[$0].n++] = $1; ( $0 ) };
popFront = function { if ([$0].n - [$0].m <= 0) throw('Queue underrun'); v = [r = @[$0][[$0].m++]]; delete(r); ( v ) };
pushFront = function { [$0][--[$0].m] = $1; ( $0 ) };

// --- Objects ---

_finddot = function { if ((i = rfind($0, '.')) < 0) throw('Non-method call'); ( i ) };
construct = function { destruct($0); invoke($0 # '.construct', $1, @$, 2); ( $0 ) };
destruct = function { if (exists(@[$0].destruct)) [$0].destruct(); ( prune($0) ) };
gc = function {
	mark => {
		include = if ($1) >true else >{ (($t = $0{span($0, '0123456789')}) !== void && $t !== '.') };
		check => if ((include($1) && $2{0} === ':')
				&& (($c = span($2{($i = find($2{1:}, ':') + 2):}, '0123456789')) >= 1)
				&& (($t = $2{$i += $c}) === void || $t === '.')
				&& (!exists(@[($r = $2{:$i})].$_gc_marked))) { [$r].$_gc_marked = true; mark($r, true) };
		if (exists($0)) check($0, void, [$0]);
		foreach($0, check);
	};
	for (frame = @^; { mark(frame, false); frame !== '::'; }; frame = @[frame # '^']);
	count = 0;
	for (frame = @^; {
			last = void;
			foreach(frame, >if (last !== ($r = @[frame][$1{:($i = span($1, '0123456789'))}])
						&& (($t = $1{$i}) === void || $t === '.')) {
					if (!exists($m = @[(last = $r)].$_gc_marked)) { destruct($r); ++count };
					delete($m)
				});
			frame !== '::'
		}; frame = @[frame # '^']);
	( count )
};
invokeMethod = function { defaults(@$3, 0, @$4, [$2].n - $3); invoke($0 # '.' # $1, [$0][$1], $2, $3, $4) };
method = function { ^$callee{_finddot(^$callee) + 1:} };
new = function { defaults(@::_alloc, 0); invoke(@::[x = ::_alloc++] # '.construct', $0, @$, 1); ( @::[x] ) };
newLocal = function { defaults(@^_alloc, 0); invoke(@^[x = ^_alloc++] # '.construct', $0, @$, 1); ( @^[x] ) };
this = function { if ((t = ^$callee{:_finddot(^$callee)}){0} === ':') ( t ) else ( @^^[t] ) };

( void )
